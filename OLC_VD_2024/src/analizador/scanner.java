// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analizador/lexico.jflex

package analizador;

// importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import excepciones.Errores;
import tokens.Tokens;


@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  7,  8,  9, 10, 11, 12, 13, 14,  0, 15, 16, 17, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 21, 22, 23,  0, 
     0, 24, 25, 26, 27, 28, 29, 30, 31, 32,  0,  0, 33,  0, 34, 35, 
     0,  0, 36, 37, 38, 39,  0,  0,  0,  0,  0,  0, 40,  0, 41, 42, 
     0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 52, 54, 55, 
    52, 52, 56, 57, 58, 59, 52, 52, 52, 52, 52, 60, 61, 62,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\11\1\1\22\12\23\1\24"+
    "\1\1\1\25\1\0\1\26\1\0\1\27\1\0\1\30"+
    "\2\0\1\31\1\0\1\32\1\33\1\34\1\35\6\0"+
    "\1\36\4\0\1\35\6\23\1\36\4\23\1\37\1\40"+
    "\1\0\1\41\6\0\1\42\1\43\2\0\6\23\1\42"+
    "\1\43\2\23\1\44\1\45\1\46\2\0\1\47\1\0"+
    "\1\50\1\45\1\46\2\23\1\47\1\23\1\50\1\0"+
    "\1\51\2\0\1\23\1\51\2\23\1\0\1\52\1\53"+
    "\1\23\1\52\1\53\1\0\1\23\3\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\176\0\176"+
    "\0\u017a\0\u01b9\0\176\0\176\0\176\0\176\0\176\0\u01f8"+
    "\0\u0237\0\176\0\176\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\176"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\176\0\u07e0\0\176\0\u01f8\0\176\0\u013b"+
    "\0\176\0\u081f\0\176\0\u085e\0\u089d\0\u08dc\0\u091b\0\176"+
    "\0\176\0\176\0\176\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\176\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u05a9\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u05a9\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\176\0\176\0\u0e46\0\u091b\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\176\0\176\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u05a9\0\u05a9"+
    "\0\u11f7\0\u1236\0\176\0\176\0\176\0\u1275\0\u12b4\0\176"+
    "\0\u12f3\0\176\0\u05a9\0\u05a9\0\u1332\0\u1371\0\u05a9\0\u13b0"+
    "\0\u05a9\0\u13ef\0\176\0\u142e\0\u146d\0\u14ac\0\u05a9\0\u14eb"+
    "\0\u152a\0\u1569\0\176\0\176\0\u15a8\0\u05a9\0\u05a9\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\1\32\1\33\2\3\1\34\1\35"+
    "\3\3\1\36\1\37\2\3\1\40\1\3\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\42\1\47\1\42\1\50"+
    "\3\42\1\51\1\52\1\42\1\53\1\54\1\55\21\0"+
    "\1\56\155\0\2\4\1\0\1\4\120\0\1\57\50\0"+
    "\6\60\1\61\41\60\1\62\26\60\11\0\1\63\65\0"+
    "\12\64\1\0\64\64\15\0\1\65\3\0\1\66\75\0"+
    "\1\67\1\0\1\21\102\0\1\70\76\0\1\71\76\0"+
    "\1\72\115\0\1\73\23\0\1\73\35\0\1\74\6\0"+
    "\1\75\3\0\1\76\7\0\1\74\6\0\1\75\4\0"+
    "\1\76\52\0\1\77\23\0\1\77\50\0\1\100\23\0"+
    "\1\100\41\0\1\101\22\0\1\101\60\0\1\102\4\0"+
    "\1\103\15\0\1\102\5\0\1\103\44\0\1\104\22\0"+
    "\1\104\65\0\1\105\23\0\1\105\50\0\1\106\23\0"+
    "\1\106\30\0\1\42\22\0\1\73\4\0\17\42\1\107"+
    "\2\42\25\0\1\42\27\0\22\42\25\0\1\42\5\0"+
    "\1\74\6\0\1\75\3\0\1\76\6\0\1\42\1\110"+
    "\6\42\1\111\4\42\1\112\4\42\25\0\1\42\20\0"+
    "\1\77\6\0\15\42\1\113\4\42\25\0\1\42\16\0"+
    "\1\100\10\0\13\42\1\114\6\42\25\0\1\42\5\0"+
    "\1\101\21\0\1\42\1\115\20\42\25\0\1\42\12\0"+
    "\1\102\4\0\1\103\7\0\6\42\1\116\5\42\1\117"+
    "\5\42\25\0\1\42\11\0\1\104\15\0\5\42\1\120"+
    "\14\42\25\0\1\42\23\0\1\105\3\0\20\42\1\121"+
    "\1\42\25\0\1\42\21\0\1\106\5\0\16\42\1\122"+
    "\3\42\100\0\1\123\1\0\2\60\3\0\72\60\12\0"+
    "\1\124\64\0\15\65\1\125\61\65\2\66\1\0\74\66"+
    "\22\0\1\126\121\0\1\127\23\0\1\127\35\0\1\130"+
    "\22\0\1\130\65\0\1\131\23\0\1\131\57\0\1\132"+
    "\23\0\1\132\50\0\1\133\23\0\1\133\46\0\1\134"+
    "\23\0\1\134\57\0\1\135\23\0\1\135\52\0\1\136"+
    "\23\0\1\136\50\0\1\137\23\0\1\137\55\0\1\140"+
    "\23\0\1\140\25\0\1\42\22\0\1\127\4\0\17\42"+
    "\1\141\2\42\25\0\1\42\5\0\1\130\21\0\1\42"+
    "\1\142\20\42\25\0\1\42\17\0\1\131\7\0\14\42"+
    "\1\143\5\42\25\0\1\42\24\0\1\132\2\0\21\42"+
    "\1\144\25\0\1\42\22\0\1\133\4\0\17\42\1\145"+
    "\2\42\25\0\1\42\16\0\1\134\10\0\13\42\1\146"+
    "\6\42\25\0\1\42\23\0\1\135\3\0\20\42\1\147"+
    "\1\42\25\0\1\42\23\0\1\136\3\0\20\42\1\150"+
    "\1\42\25\0\1\42\21\0\1\137\5\0\16\42\1\151"+
    "\3\42\25\0\1\42\24\0\1\140\2\0\21\42\1\152"+
    "\3\0\21\65\1\153\55\65\46\0\1\154\23\0\1\154"+
    "\50\0\1\155\23\0\1\155\53\0\1\156\23\0\1\156"+
    "\36\0\1\157\22\0\1\157\56\0\1\160\22\0\1\160"+
    "\64\0\1\140\23\0\1\140\45\0\1\161\22\0\1\161"+
    "\47\0\1\162\22\0\1\162\41\0\1\42\23\0\1\154"+
    "\3\0\20\42\1\163\1\42\25\0\1\42\21\0\1\155"+
    "\5\0\16\42\1\164\3\42\25\0\1\42\22\0\1\156"+
    "\4\0\17\42\1\165\2\42\25\0\1\42\6\0\1\157"+
    "\20\0\2\42\1\166\17\42\25\0\1\42\11\0\1\160"+
    "\15\0\5\42\1\167\14\42\25\0\1\42\22\0\1\140"+
    "\4\0\17\42\1\152\2\42\25\0\1\42\15\0\1\161"+
    "\11\0\11\42\1\170\10\42\25\0\1\42\11\0\1\162"+
    "\15\0\5\42\1\171\14\42\46\0\1\172\2\0\1\173"+
    "\20\0\1\172\2\0\1\173\45\0\1\174\23\0\1\174"+
    "\53\0\1\175\23\0\1\175\32\0\1\42\20\0\1\172"+
    "\2\0\1\173\3\0\15\42\1\176\2\42\1\177\1\42"+
    "\25\0\1\42\16\0\1\174\10\0\13\42\1\200\6\42"+
    "\25\0\1\42\17\0\1\175\7\0\14\42\1\201\5\42"+
    "\44\0\1\202\23\0\1\202\45\0\1\203\22\0\1\203"+
    "\55\0\1\204\22\0\1\204\37\0\1\42\16\0\1\202"+
    "\10\0\13\42\1\205\6\42\25\0\1\42\11\0\1\203"+
    "\15\0\5\42\1\206\14\42\25\0\1\42\13\0\1\204"+
    "\13\0\7\42\1\207\12\42\37\0\1\210\22\0\1\210"+
    "\41\0\1\42\11\0\1\210\15\0\5\42\1\211\14\42"+
    "\23\0\1\212\76\0\1\212\1\0\1\42\27\0\22\42"+
    "\44\0\1\213\23\0\1\213\54\0\1\214\23\0\1\214"+
    "\45\0\1\215\22\0\1\215\15\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5922];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\2\11\2\1\5\11\2\1\2\11"+
    "\14\1\1\11\12\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\1\1\0\4\11"+
    "\6\0\1\11\4\0\14\1\2\11\1\0\1\1\6\0"+
    "\2\11\2\0\12\1\3\11\2\0\1\11\1\0\1\11"+
    "\7\1\1\0\1\11\2\0\4\1\1\0\2\11\3\1"+
    "\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[141];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<Errores> erroresLexicos = new LinkedList<>();
    public LinkedList<Tokens> MisTokens = new LinkedList<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    erroresLexicos = new LinkedList<>();
    MisTokens = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { erroresLexicos.add(new Errores("LEXICO", "El caracter "+ yytext() + " no pertenece al lenguaje", yyline, yycolumn));
            }
          // fall through
          case 45: break;
          case 2:
            { 
            }
          // fall through
          case 46: break;
          case 3:
            { MisTokens.add(new Tokens("NOT",yytext(), yyline, yycolumn));
                                return new Symbol(sym.NOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 47: break;
          case 4:
            { MisTokens.add(new Tokens("RAIZ",yytext(), yyline, yycolumn));
                                return new Symbol(sym.RAIZ, yyline, yycolumn, yytext());
            }
          // fall through
          case 48: break;
          case 5:
            { MisTokens.add(new Tokens("MODULO",yytext(), yyline, yycolumn));
                                return new Symbol(sym.MODULO, yyline, yycolumn, yytext());
            }
          // fall through
          case 49: break;
          case 6:
            { MisTokens.add(new Tokens("PAR1",yytext(), yyline, yycolumn));
                              return new Symbol(sym.PAR1, yyline, yycolumn, yytext());
            }
          // fall through
          case 50: break;
          case 7:
            { MisTokens.add(new Tokens("PAR2",yytext(), yyline, yycolumn));
                              return new Symbol(sym.PAR2, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 8:
            { MisTokens.add(new Tokens("POR",yytext(), yyline, yycolumn));
                                return new Symbol(sym.POR, yyline, yycolumn, yytext());
            }
          // fall through
          case 52: break;
          case 9:
            { MisTokens.add(new Tokens("MAS",yytext(), yyline, yycolumn));
                                return new Symbol(sym.MAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 10:
            { MisTokens.add(new Tokens("MENOS",yytext(), yyline, yycolumn));
                               return new Symbol(sym.MENOS, yyline, yycolumn, yytext());
            }
          // fall through
          case 54: break;
          case 11:
            { MisTokens.add(new Tokens("DIVISION",yytext(), yyline, yycolumn));
                                return new Symbol(sym.DIVISION, yyline, yycolumn, yytext());
            }
          // fall through
          case 55: break;
          case 12:
            { MisTokens.add(new Tokens("ENTERO",yytext(), yyline, yycolumn));
                                return new Symbol(sym.ENTERO, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 13:
            { MisTokens.add(new Tokens("COLOM",yytext(), yyline, yycolumn));
                              return new Symbol(sym.COLOM, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 14:
            { MisTokens.add(new Tokens("FINCADENA",yytext(), yyline, yycolumn));
                              return new Symbol(sym.FINCADENA, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 15:
            { MisTokens.add(new Tokens("MENOR",yytext(), yyline, yycolumn));
                                return new Symbol(sym.MENOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 16:
            { MisTokens.add(new Tokens("IGUAL",yytext(), yyline, yycolumn));
                                return new Symbol(sym.IGUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 17:
            { MisTokens.add(new Tokens("MAYOR",yytext(), yyline, yycolumn));
                                return new Symbol(sym.MAYOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 18:
            { MisTokens.add(new Tokens("POTENCIA",yytext(), yyline, yycolumn));
                                return new Symbol(sym.POTENCIA, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 19:
            { MisTokens.add(new Tokens("ID",yytext(), yyline, yycolumn));
                                return new Symbol(sym.ID, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 20:
            { MisTokens.add(new Tokens("LKEY",yytext(), yyline, yycolumn));
                              return new Symbol(sym.LKEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 21:
            { MisTokens.add(new Tokens("RKEY",yytext(), yyline, yycolumn));
                              return new Symbol(sym.RKEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 22:
            { MisTokens.add(new Tokens("DIFERENCIA",yytext(), yyline, yycolumn));
                                return new Symbol(sym.DIFERENCIA, yyline, yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 23:
            { String cadena = yytext(); 
                             cadena=cadena.substring(1, cadena.length() - 1);
                             cadena = cadena.replace("\\n", "\n")
                                             .replace("\\t", "\t")
                                             .replace("\\\\", "\\\\")
                                             .replace("\\\"", "\"")
                                             .replace("\\'", "'");
                             MisTokens.add(new Tokens("CADENA",cadena, yyline, yycolumn));
                             return new Symbol(sym.CADENA, yyline, yycolumn, cadena);
            }
          // fall through
          case 67: break;
          case 24:
            { MisTokens.add(new Tokens("AND",yytext(), yyline, yycolumn));
                                return new Symbol(sym.AND, yyline, yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 25:
            { /* Ignorar comentarios de una línea */
            }
          // fall through
          case 69: break;
          case 26:
            { MisTokens.add(new Tokens("MENORIGUAL",yytext(), yyline, yycolumn));
                                return new Symbol(sym.MENORIGUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 27:
            { MisTokens.add(new Tokens("IGUALACION",yytext(), yyline, yycolumn));
                                return new Symbol(sym.IGUALACION, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 28:
            { MisTokens.add(new Tokens("MAYORIGUAL",yytext(), yyline, yycolumn));
                                return new Symbol(sym.MAYORIGUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 29:
            { MisTokens.add(new Tokens("AS",yytext(), yyline, yycolumn));
                                return new Symbol(sym.AS, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 30:
            { MisTokens.add(new Tokens("IF",yytext(), yyline, yycolumn));
                                return new Symbol(sym.IF, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 31:
            { MisTokens.add(new Tokens("OR",yytext(), yyline, yycolumn));
                                return new Symbol(sym.OR, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 32:
            { String caracter = yytext(); 
                             caracter=caracter.substring(1, caracter.length() - 1);
                             MisTokens.add(new Tokens("CARACTER",caracter, yyline, yycolumn));
                             return new Symbol(sym.CARACTER, yyline, yycolumn, caracter);
            }
          // fall through
          case 76: break;
          case 33:
            { MisTokens.add(new Tokens("DECIMAL",yytext(), yyline, yycolumn));
                                return new Symbol(sym.DECIMAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 34:
            { MisTokens.add(new Tokens("INT",yytext(), yyline, yycolumn));
                                return new Symbol(sym.INT, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 35:
            { MisTokens.add(new Tokens("LET",yytext(), yyline, yycolumn));
                                return new Symbol(sym.LET, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 36:
            { /* Ignorar comentarios de múltiples líneas */
            }
          // fall through
          case 80: break;
          case 37:
            { MisTokens.add(new Tokens("CAST",yytext(), yyline, yycolumn));
                                return new Symbol(sym.CAST, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 38:
            { MisTokens.add(new Tokens("CHAR",yytext(), yyline, yycolumn));
                                return new Symbol(sym.CHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 39:
            { MisTokens.add(new Tokens("ELSE",yytext(), yyline, yycolumn));
                                return new Symbol(sym.ELSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 40:
            { MisTokens.add(new Tokens("BOOLEANO",yytext(), yyline, yycolumn));
                                return new Symbol(sym.BOOLEANO, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 41:
            { MisTokens.add(new Tokens("CONST",yytext(), yyline, yycolumn));
                                return new Symbol(sym.CONST, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 42:
            { MisTokens.add(new Tokens("DOUBLE",yytext(), yyline, yycolumn));
                                return new Symbol(sym.DOUBLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 43:
            { MisTokens.add(new Tokens("STRING",yytext(), yyline, yycolumn));
                                return new Symbol(sym.STRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 44:
            { MisTokens.add(new Tokens("IMPRIMIR",yytext(), yyline, yycolumn));
                                return new Symbol(sym.IMPRIMIR, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
