
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instrucciones;
import simbolo.*;
import excepciones.Errores;
import instrucciones.Run;
import instrucciones.Llamada;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVUD;
import instrucciones.DeclaracionVBD;
import instrucciones.DeclaracionListas;
import instrucciones.AsignacionVar;
import instrucciones.AsignacionVUD;
import instrucciones.AsignacionVBD;
import instrucciones.Append;
import instrucciones.Metodo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.IfElseIf;
import instrucciones.IfElse;
import instrucciones.If;
import instrucciones.Caso;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Return;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.Casteos;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.AccesoVar;
import expresiones.Get;
import expresiones.AccesoVUD;
import expresiones.AccesoVBD;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\013\006\000" +
    "\002\033\010\000\002\033\007\000\002\034\006\000\002" +
    "\034\005\000\002\030\004\000\002\030\005\000\002\026" +
    "\004\000\002\027\004\000\002\014\010\000\002\014\006" +
    "\000\002\014\011\000\002\014\014\000\002\014\016\000" +
    "\002\014\010\000\002\014\006\000\002\014\014\000\002" +
    "\014\016\000\002\015\005\000\002\015\010\000\002\015" +
    "\010\000\002\015\010\000\002\015\013\000\002\004\005" +
    "\000\002\004\003\000\002\005\007\000\002\005\005\000" +
    "\002\032\011\000\002\032\012\000\002\006\005\000\002" +
    "\006\003\000\002\010\007\000\002\010\005\000\002\007" +
    "\007\000\002\007\005\000\002\016\011\000\002\016\015" +
    "\000\002\016\013\000\002\017\015\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\011\000\002" +
    "\021\013\000\002\024\014\000\002\011\003\000\002\011" +
    "\004\000\002\025\007\000\002\022\005\000\002\022\004" +
    "\000\002\023\005\000\002\023\004\000\002\031\004\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\031\010\000\002\031\006\000\002\031\006\000\002\031" +
    "\006\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\005\000" +
    "\002\031\003\000\002\031\010\000\002\031\006\000\002" +
    "\031\011\000\002\031\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\052\003\034\011\030\012\036\013\013\014" +
    "\033\015\046\020\006\023\042\024\004\070\014\071\011" +
    "\072\005\073\043\074\024\075\037\076\027\100\017\101" +
    "\041\102\051\103\021\001\002\000\004\011\u0119\001\002" +
    "\000\020\011\uff96\017\uff96\036\uff96\037\uff96\041\uff96\052" +
    "\uff96\057\uff96\001\002\000\004\035\u0116\001\002\000\056" +
    "\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\020\ufff9\023\ufff9\024\ufff9\034\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\100\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\001\002\000\054\002\000\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\070\014\071\011\072\005\073\043\074\024" +
    "\075\037\076\027\100\017\101\041\102\051\103\021\001" +
    "\002\000\020\011\uff97\017\uff97\036\uff97\037\uff97\041\uff97" +
    "\052\uff97\057\uff97\001\002\000\056\002\ufff2\003\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\023\ufff2" +
    "\024\ufff2\034\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2" +
    "\001\002\000\004\017\u0115\001\002\000\020\011\uff98\017" +
    "\uff98\036\uff98\037\uff98\041\uff98\052\uff98\057\uff98\001\002" +
    "\000\056\002\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7\034\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\100" +
    "\ufff7\101\ufff7\102\ufff7\103\ufff7\001\002\000\004\017\u0114" +
    "\001\002\000\004\035\u0105\001\002\000\056\002\ufff8\003" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8" +
    "\023\ufff8\024\ufff8\034\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\100\ufff8\101\ufff8\102\ufff8" +
    "\103\ufff8\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\035\072\043\066\065\076\001\002\000\004\002\364\001" +
    "\002\000\056\002\ufff1\003\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\020\ufff1\023\ufff1\024\ufff1\034\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\100\ufff1\101\ufff1\102\ufff1\103\ufff1\001\002\000\020\011" +
    "\uff94\017\uff94\036\uff94\037\uff94\041\uff94\052\uff94\057\uff94" +
    "\001\002\000\056\002\ufff5\003\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\020\ufff5\023\ufff5\024\ufff5\034\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\103\ufff5\001\002\000\004" +
    "\017\363\001\002\000\004\035\350\001\002\000\016\035" +
    "\140\037\321\052\320\053\323\066\322\067\317\001\002" +
    "\000\056\002\ufffe\003\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\020\ufffe\023\ufffe\024\ufffe\034\ufffe\070\ufffe" +
    "\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\100" +
    "\ufffe\101\ufffe\102\ufffe\103\ufffe\001\002\000\056\002\ufff4" +
    "\003\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020" +
    "\ufff4\023\ufff4\024\ufff4\034\ufff4\070\ufff4\071\ufff4\072\ufff4" +
    "\073\ufff4\074\ufff4\075\ufff4\076\ufff4\100\ufff4\101\ufff4\102" +
    "\ufff4\103\ufff4\001\002\000\036\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\017\315\021\065\025\074\026" +
    "\064\027\061\035\072\043\066\065\076\001\002\000\006" +
    "\017\312\034\313\001\002\000\056\002\ufff6\003\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\034\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074" +
    "\ufff6\075\ufff6\076\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6" +
    "\001\002\000\004\017\311\001\002\000\020\011\uff93\017" +
    "\uff93\036\uff93\037\uff93\041\uff93\052\uff93\057\uff93\001\002" +
    "\000\056\002\ufffc\003\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\020\ufffc\023\ufffc\024\ufffc\034\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\100" +
    "\ufffc\101\ufffc\102\ufffc\103\ufffc\001\002\000\004\035\303" +
    "\001\002\000\004\011\244\001\002\000\020\011\uff95\017" +
    "\uff95\036\uff95\037\uff95\041\uff95\052\uff95\057\uff95\001\002" +
    "\000\004\017\243\001\002\000\004\017\242\001\002\000" +
    "\004\011\233\001\002\000\004\011\210\001\002\000\056" +
    "\002\ufff3\003\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\020\ufff3\023\ufff3\024\ufff3\034\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\100\ufff3\101" +
    "\ufff3\102\ufff3\103\ufff3\001\002\000\004\033\053\001\002" +
    "\000\056\002\ufff0\003\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\020\ufff0\023\ufff0\024\ufff0\034\ufff0\070\ufff0" +
    "\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100" +
    "\ufff0\101\ufff0\102\ufff0\103\ufff0\001\002\000\052\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\070\014\071\011\072\005\073\043\074\024" +
    "\075\037\076\027\100\017\101\041\102\051\103\021\001" +
    "\002\000\054\003\034\011\030\012\036\013\013\014\033" +
    "\015\046\020\006\023\042\024\004\034\056\070\014\071" +
    "\011\072\005\073\043\074\024\075\037\076\027\100\017" +
    "\101\041\102\051\103\021\001\002\000\056\002\uffff\003" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\020\uffff" +
    "\023\uffff\024\uffff\034\uffff\070\uffff\071\uffff\072\uffff\073" +
    "\uffff\074\uffff\075\uffff\076\uffff\100\uffff\101\uffff\102\uffff" +
    "\103\uffff\001\002\000\004\101\057\001\002\000\004\035" +
    "\060\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\035" +
    "\072\043\066\065\076\001\002\000\004\035\205\001\002" +
    "\000\056\017\uffa0\022\uffa0\033\uffa0\036\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\001\002\000\056\017\uffa2" +
    "\022\uffa2\033\uffa2\036\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\001\002\000\004\035\202\001\002\000\004" +
    "\035\175\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\035\072\043\066\065\076\001\002\000\056\017\uff9f\022" +
    "\uff9f\033\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\064\uff9f\001\002\000\056\017\uffa3\022\uffa3\033\uffa3\036" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002" +
    "\000\056\017\uff99\022\uff99\033\uff99\036\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\035\072\043\066\065\076\001\002" +
    "\000\042\036\170\042\112\043\103\045\106\046\115\047" +
    "\104\050\107\051\114\055\116\056\110\057\113\060\111" +
    "\061\105\062\102\063\101\064\117\001\002\000\004\035" +
    "\165\001\002\000\064\017\uff9d\022\uff9d\033\uff9d\035\140" +
    "\036\uff9d\037\137\040\uff9d\041\uff9d\042\uff9d\043\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\053\141\054\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\035\072\043\066\065\076\001\002\000\056\017\uffa1" +
    "\022\uffa1\033\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\001\002\000\056\017\uffa8\022\uffa8\033\uffa8" +
    "\036\uffa8\040\uffa8\041\uffa8\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\054\uffa8\055\116\056\110" +
    "\057\113\060\111\061\105\062\102\063\uffa8\064\uffa8\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\035\072\043" +
    "\066\065\076\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\035\072\043\066\065\076\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\035\072\043\066\065\076\001\002" +
    "\000\034\004\077\005\062\006\070\007\063\010\067\011" +
    "\075\021\065\025\074\026\064\027\061\035\072\043\066" +
    "\065\076\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\035\072\043\066\065\076\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\035\072\043\066\065\076\001\002\000" +
    "\034\004\077\005\062\006\070\007\063\010\067\011\075" +
    "\021\065\025\074\026\064\027\061\035\072\043\066\065" +
    "\076\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\035" +
    "\072\043\066\065\076\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\035\072\043\066\065\076\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\035\072\043\066\065\076" +
    "\001\002\000\034\004\077\005\062\006\070\007\063\010" +
    "\067\011\075\021\065\025\074\026\064\027\061\035\072" +
    "\043\066\065\076\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\035\072\043\066\065\076\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\035\072\043\066\065\076\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\035\072\043" +
    "\066\065\076\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\035\072\043\066\065\076\001\002\000\056\017\uffa9" +
    "\022\uffa9\033\uffa9\036\uffa9\040\uffa9\041\uffa9\042\112\043" +
    "\103\045\106\046\115\047\104\050\107\051\114\054\uffa9" +
    "\055\116\056\110\057\113\060\111\061\105\062\102\063" +
    "\101\064\uffa9\001\002\000\056\017\uffb0\022\uffb0\033\uffb0" +
    "\036\uffb0\040\uffb0\041\uffb0\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001" +
    "\002\000\056\017\uffb4\022\uffb4\033\uffb4\036\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\047\104\050" +
    "\107\051\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\001\002\000\056\017" +
    "\uffb1\022\uffb1\033\uffb1\036\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\045\uffb1\046\uffb1\047\104\050\107\051\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\001\002\000\056\017\uffae\022\uffae\033" +
    "\uffae\036\uffae\040\uffae\041\uffae\042\112\043\103\045\106" +
    "\046\115\047\104\050\107\051\114\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae" +
    "\001\002\000\056\017\uffb7\022\uffb7\033\uffb7\036\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\045\106\046\115\047\104" +
    "\050\107\051\114\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000\056" +
    "\017\uffad\022\uffad\033\uffad\036\uffad\040\uffad\041\uffad\042" +
    "\112\043\103\045\106\046\115\047\104\050\107\051\114" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\001\002\000\056\017\uffaf\022\uffaf" +
    "\033\uffaf\036\uffaf\040\uffaf\041\uffaf\042\112\043\103\045" +
    "\106\046\115\047\104\050\107\051\114\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\001\002\000\052\017\uffb2\022\uffb2\033\uffb2\036\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\051" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\001\002\000\056\017\uffb5\022" +
    "\uffb5\033\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\045\uffb5\046\uffb5\047\104\050\107\051\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\001\002\000\056\017\uffac\022\uffac\033\uffac\036" +
    "\uffac\040\uffac\041\uffac\042\112\043\103\045\106\046\115" +
    "\047\104\050\107\051\114\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001\002" +
    "\000\052\017\uffb3\022\uffb3\033\uffb3\036\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\051\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\001\002\000\056\017\uffb6\022\uffb6\033\uffb6" +
    "\036\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\045\106\046" +
    "\115\047\104\050\107\051\114\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001" +
    "\002\000\056\017\uffab\022\uffab\033\uffab\036\uffab\040\uffab" +
    "\041\uffab\042\112\043\103\045\106\046\115\047\104\050" +
    "\107\051\114\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\056\017" +
    "\uffaa\022\uffaa\033\uffaa\036\uffaa\040\uffaa\041\uffaa\042\112" +
    "\043\103\045\106\046\115\047\104\050\107\051\114\054" +
    "\uffaa\055\116\056\110\057\113\060\111\061\105\062\102" +
    "\063\uffaa\064\uffaa\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\035\072\043\066\065\076\001\002\000\006\011" +
    "\146\036\150\001\002\000\004\032\142\001\002\000\004" +
    "\035\143\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\035\072\043\066\065\076\001\002\000\042\036\145\042" +
    "\112\043\103\045\106\046\115\047\104\050\107\051\114" +
    "\055\116\056\110\057\113\060\111\061\105\062\102\063" +
    "\101\064\117\001\002\000\056\017\uff9c\022\uff9c\033\uff9c" +
    "\036\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\001" +
    "\002\000\004\052\156\001\002\000\006\036\152\041\151" +
    "\001\002\000\056\017\uffe8\022\uffe8\033\uffe8\036\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\001\002\000\004" +
    "\011\153\001\002\000\056\017\uffe9\022\uffe9\033\uffe9\036" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\001\002" +
    "\000\004\052\154\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\035\072\043\066\065\076\001\002\000\044\036" +
    "\uffcb\041\uffcb\042\112\043\103\045\106\046\115\047\104" +
    "\050\107\051\114\055\116\056\110\057\113\060\111\061" +
    "\105\062\102\063\101\064\117\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\035\072\043\066\065\076\001\002" +
    "\000\044\036\uffca\041\uffca\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\042\040\161\042\112\043\103\045\106\046\115\047\104" +
    "\050\107\051\114\055\116\056\110\057\113\060\111\061" +
    "\105\062\102\063\101\064\117\001\002\000\060\017\uff9b" +
    "\022\uff9b\033\uff9b\036\uff9b\037\162\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\035\072\043\066\065\076\001\002\000\042" +
    "\040\164\042\112\043\103\045\106\046\115\047\104\050" +
    "\107\051\114\055\116\056\110\057\113\060\111\061\105" +
    "\062\102\063\101\064\117\001\002\000\056\017\uff9a\022" +
    "\uff9a\033\uff9a\036\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\035\072\043\066\065\076\001\002\000\042\036\167\042" +
    "\112\043\103\045\106\046\115\047\104\050\107\051\114" +
    "\055\116\056\110\057\113\060\111\061\105\062\102\063" +
    "\101\064\117\001\002\000\056\017\uffa6\022\uffa6\033\uffa6" +
    "\036\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\001" +
    "\002\000\004\017\171\001\002\000\056\002\uffc1\003\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\034\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\076\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\001\002\000\042\036\173\042\112\043\103\045\106" +
    "\046\115\047\104\050\107\051\114\055\116\056\110\057" +
    "\113\060\111\061\105\062\102\063\101\064\117\001\002" +
    "\000\056\017\uff9e\022\uff9e\033\uff9e\036\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\064\uff9e\001\002\000\056\017\uffb8" +
    "\022\uffb8\033\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\054\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\035\072\043\066\065\076\001\002\000\042\022\177" +
    "\042\112\043\103\045\106\046\115\047\104\050\107\051" +
    "\114\055\116\056\110\057\113\060\111\061\105\062\102" +
    "\063\101\064\117\001\002\000\016\070\014\071\011\072" +
    "\005\073\043\074\024\075\037\001\002\000\004\036\201" +
    "\001\002\000\056\017\uffa7\022\uffa7\033\uffa7\036\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\035\072\043\066\065\076" +
    "\001\002\000\042\036\204\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\056\017\uffa5\022\uffa5\033\uffa5\036\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\035\072\043\066\065\076\001\002\000" +
    "\042\036\207\042\112\043\103\045\106\046\115\047\104" +
    "\050\107\051\114\055\116\056\110\057\113\060\111\061" +
    "\105\062\102\063\101\064\117\001\002\000\056\017\uffa4" +
    "\022\uffa4\033\uffa4\036\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\001\002\000\004\035\211\001\002\000\006" +
    "\011\212\036\215\001\002\000\004\016\227\001\002\000" +
    "\006\036\uffce\041\uffce\001\002\000\006\036\222\041\221" +
    "\001\002\000\004\033\216\001\002\000\052\003\034\011" +
    "\030\012\036\013\013\014\033\015\046\020\006\023\042" +
    "\024\004\070\014\071\011\072\005\073\043\074\024\075" +
    "\037\076\027\100\017\101\041\102\051\103\021\001\002" +
    "\000\054\003\034\011\030\012\036\013\013\014\033\015" +
    "\046\020\006\023\042\024\004\034\220\070\014\071\011" +
    "\072\005\073\043\074\024\075\037\076\027\100\017\101" +
    "\041\102\051\103\021\001\002\000\056\002\uffd1\003\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\023" +
    "\uffd1\024\uffd1\034\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\100\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\001\002\000\004\011\212\001\002\000\004\033\223" +
    "\001\002\000\052\003\034\011\030\012\036\013\013\014" +
    "\033\015\046\020\006\023\042\024\004\070\014\071\011" +
    "\072\005\073\043\074\024\075\037\076\027\100\017\101" +
    "\041\102\051\103\021\001\002\000\054\003\034\011\030" +
    "\012\036\013\013\014\033\015\046\020\006\023\042\024" +
    "\004\034\225\070\014\071\011\072\005\073\043\074\024" +
    "\075\037\076\027\100\017\101\041\102\051\103\021\001" +
    "\002\000\056\002\uffd0\003\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\020\uffd0\023\uffd0\024\uffd0\034\uffd0\070" +
    "\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\100\uffd0\101\uffd0\102\uffd0\103\uffd0\001\002\000\006\036" +
    "\uffcf\041\uffcf\001\002\000\016\070\014\071\011\072\005" +
    "\073\043\074\024\075\037\001\002\000\010\036\uffcc\041" +
    "\uffcc\052\231\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\035\072\043\066\065\076\001\002\000\044\036\uffcd" +
    "\041\uffcd\042\112\043\103\045\106\046\115\047\104\050" +
    "\107\051\114\055\116\056\110\057\113\060\111\061\105" +
    "\062\102\063\101\064\117\001\002\000\004\035\234\001" +
    "\002\000\006\011\146\036\236\001\002\000\006\036\240" +
    "\041\151\001\002\000\004\017\237\001\002\000\056\002" +
    "\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\020\uffea\023\uffea\024\uffea\034\uffea\070\uffea\071\uffea\072" +
    "\uffea\073\uffea\074\uffea\075\uffea\076\uffea\100\uffea\101\uffea" +
    "\102\uffea\103\uffea\001\002\000\004\017\241\001\002\000" +
    "\056\002\uffeb\003\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\020\uffeb\023\uffeb\024\uffeb\034\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\100\uffeb" +
    "\101\uffeb\102\uffeb\103\uffeb\001\002\000\056\002\ufffa\003" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa" +
    "\023\ufffa\024\ufffa\034\ufffa\070\ufffa\071\ufffa\072\ufffa\073" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\100\ufffa\101\ufffa\102\ufffa" +
    "\103\ufffa\001\002\000\056\002\ufffb\003\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\023\ufffb\024\ufffb" +
    "\034\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\001\002" +
    "\000\004\016\245\001\002\000\020\030\246\070\014\071" +
    "\011\072\005\073\043\074\024\075\037\001\002\000\004" +
    "\061\300\001\002\000\010\017\uffe2\037\251\052\250\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\035\072\043" +
    "\066\065\076\001\002\000\004\040\252\001\002\000\006" +
    "\037\254\052\253\001\002\000\004\037\274\001\002\000" +
    "\004\040\255\001\002\000\004\052\256\001\002\000\004" +
    "\037\257\001\002\000\004\037\260\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\035\072\043\066\065\076\001" +
    "\002\000\006\040\263\041\262\001\002\000\004\037\264" +
    "\001\002\000\004\017\uffdf\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\035\072\043\066\065\076\001\002\000" +
    "\044\040\uffd4\041\uffd4\042\112\043\103\045\106\046\115" +
    "\047\104\050\107\051\114\055\116\056\110\057\113\060" +
    "\111\061\105\062\102\063\101\064\117\001\002\000\006" +
    "\040\270\041\267\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\035\072\043\066\065\076\001\002\000\006\040" +
    "\uffd3\041\uffd3\001\002\000\044\040\uffd5\041\uffd5\042\112" +
    "\043\103\045\106\046\115\047\104\050\107\051\114\055" +
    "\116\056\110\057\113\060\111\061\105\062\102\063\101" +
    "\064\117\001\002\000\006\040\273\041\267\001\002\000" +
    "\006\040\uffd2\041\uffd2\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\035\072\043\066\065\076\001\002\000\006" +
    "\040\276\041\267\001\002\000\004\017\uffe0\001\002\000" +
    "\042\017\uffe3\042\112\043\103\045\106\046\115\047\104" +
    "\050\107\051\114\055\116\056\110\057\113\060\111\061" +
    "\105\062\102\063\101\064\117\001\002\000\016\070\014" +
    "\071\011\072\005\073\043\074\024\075\037\001\002\000" +
    "\004\057\302\001\002\000\004\017\uffe1\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\035\072\043\066\065\076" +
    "\001\002\000\042\036\305\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\004\033\306\001\002\000\052\003\034\011\030\012\036" +
    "\013\013\014\033\015\046\020\006\023\042\024\004\070" +
    "\014\071\011\072\005\073\043\074\024\075\037\076\027" +
    "\100\017\101\041\102\051\103\021\001\002\000\054\003" +
    "\034\011\030\012\036\013\013\014\033\015\046\020\006" +
    "\023\042\024\004\034\310\070\014\071\011\072\005\073" +
    "\043\074\024\075\037\076\027\100\017\101\041\102\051" +
    "\103\021\001\002\000\056\002\uffc2\003\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2\023\uffc2\024\uffc2" +
    "\034\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\001\002" +
    "\000\056\002\uffe5\003\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\020\uffe5\023\uffe5\024\uffe5\034\uffe5\070\uffe5" +
    "\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\100" +
    "\uffe5\101\uffe5\102\uffe5\103\uffe5\001\002\000\056\002\uffee" +
    "\003\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020" +
    "\uffee\023\uffee\024\uffee\034\uffee\070\uffee\071\uffee\072\uffee" +
    "\073\uffee\074\uffee\075\uffee\076\uffee\100\uffee\101\uffee\102" +
    "\uffee\103\uffee\001\002\000\056\002\uffed\003\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\023\uffed\024" +
    "\uffed\034\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed" +
    "\075\uffed\076\uffed\100\uffed\101\uffed\102\uffed\103\uffed\001" +
    "\002\000\042\017\316\042\112\043\103\045\106\046\115" +
    "\047\104\050\107\051\114\055\116\056\110\057\113\060" +
    "\111\061\105\062\102\063\101\064\117\001\002\000\056" +
    "\002\uffe7\003\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\020\uffe7\023\uffe7\024\uffe7\034\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\100\uffe7\101" +
    "\uffe7\102\uffe7\103\uffe7\001\002\000\056\002\uffe6\003\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\020\uffe6\023" +
    "\uffe6\024\uffe6\034\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\100\uffe6\101\uffe6\102\uffe6\103" +
    "\uffe6\001\002\000\062\002\uffb9\003\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\017\347\020\uffb9\023\uffb9\024" +
    "\uffb9\034\uffb9\036\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\100\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\035" +
    "\072\043\066\065\076\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\035\072\043\066\065\076\001\002\000\062" +
    "\002\uffbb\003\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\017\334\020\uffbb\023\uffbb\024\uffbb\034\uffbb\036\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\001\002\000\006" +
    "\031\325\032\324\001\002\000\004\035\331\001\002\000" +
    "\004\035\326\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\035\072\043\066\065\076\001\002\000\042\036\330" +
    "\042\112\043\103\045\106\046\115\047\104\050\107\051" +
    "\114\055\116\056\110\057\113\060\111\061\105\062\102" +
    "\063\101\064\117\001\002\000\006\017\uffd9\036\uffd9\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\035\072\043" +
    "\066\065\076\001\002\000\042\036\333\042\112\043\103" +
    "\045\106\046\115\047\104\050\107\051\114\055\116\056" +
    "\110\057\113\060\111\061\105\062\102\063\101\064\117" +
    "\001\002\000\006\017\uffd8\036\uffd8\001\002\000\060\002" +
    "\uffbc\003\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\020\uffbc\023\uffbc\024\uffbc\034\uffbc\036\uffbc\070\uffbc\071" +
    "\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\100\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\001\002\000\042\040\336\042" +
    "\112\043\103\045\106\046\115\047\104\050\107\051\114" +
    "\055\116\056\110\057\113\060\111\061\105\062\102\063" +
    "\101\064\117\001\002\000\006\037\340\052\337\001\002" +
    "\000\034\004\077\005\062\006\070\007\063\010\067\011" +
    "\075\021\065\025\074\026\064\027\061\035\072\043\066" +
    "\065\076\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\035\072\043\066\065\076\001\002\000\042\040\342\042" +
    "\112\043\103\045\106\046\115\047\104\050\107\051\114" +
    "\055\116\056\110\057\113\060\111\061\105\062\102\063" +
    "\101\064\117\001\002\000\004\052\343\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\035\072\043\066\065\076" +
    "\001\002\000\044\017\uffd6\036\uffd6\042\112\043\103\045" +
    "\106\046\115\047\104\050\107\051\114\055\116\056\110" +
    "\057\113\060\111\061\105\062\102\063\101\064\117\001" +
    "\002\000\044\017\uffd7\036\uffd7\042\112\043\103\045\106" +
    "\046\115\047\104\050\107\051\114\055\116\056\110\057" +
    "\113\060\111\061\105\062\102\063\101\064\117\001\002" +
    "\000\044\017\uffda\036\uffda\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\060\002\uffba\003\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\020\uffba\023\uffba\024\uffba\034\uffba\036\uffba\070" +
    "\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba" +
    "\100\uffba\101\uffba\102\uffba\103\uffba\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\035\072\043\066\065\076\001" +
    "\002\000\042\036\352\042\112\043\103\045\106\046\115" +
    "\047\104\050\107\051\114\055\116\056\110\057\113\060" +
    "\111\061\105\062\102\063\101\064\117\001\002\000\004" +
    "\033\353\001\002\000\052\003\034\011\030\012\036\013" +
    "\013\014\033\015\046\020\006\023\042\024\004\070\014" +
    "\071\011\072\005\073\043\074\024\075\037\076\027\100" +
    "\017\101\041\102\051\103\021\001\002\000\054\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\034\355\070\014\071\011\072\005\073\043" +
    "\074\024\075\037\076\027\100\017\101\041\102\051\103" +
    "\021\001\002\000\060\002\uffc9\003\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\020\uffc9\023\uffc9\024\uffc9\034" +
    "\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\077\356\100\uffc9\101\uffc9\102\uffc9\103\uffc9\001" +
    "\002\000\006\033\357\076\027\001\002\000\052\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\070\014\071\011\072\005\073\043\074\024" +
    "\075\037\076\027\100\017\101\041\102\051\103\021\001" +
    "\002\000\056\002\uffc7\003\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\020\uffc7\023\uffc7\024\uffc7\034\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\001\002\000\054\003" +
    "\034\011\030\012\036\013\013\014\033\015\046\020\006" +
    "\023\042\024\004\034\362\070\014\071\011\072\005\073" +
    "\043\074\024\075\037\076\027\100\017\101\041\102\051" +
    "\103\021\001\002\000\056\002\uffc8\003\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\020\uffc8\023\uffc8\024\uffc8" +
    "\034\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\001\002" +
    "\000\056\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\020\ufffd\023\ufffd\024\ufffd\034\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\100" +
    "\ufffd\101\ufffd\102\ufffd\103\ufffd\001\002\000\004\002\001" +
    "\001\002\000\042\033\366\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\034\004\077\005\062\006\070\007\063\010\067\011\075" +
    "\021\065\025\074\026\064\027\061\035\072\043\066\065" +
    "\076\001\002\000\036\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\035" +
    "\072\043\066\065\076\104\377\001\002\000\036\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\021\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\035\uffbf\043\uffbf\065\uffbf\104\uffbf" +
    "\001\002\000\042\042\112\043\103\045\106\046\115\047" +
    "\104\050\107\051\114\054\372\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\004\033\373\001\002\000\052\003\034\011\030\012\036" +
    "\013\013\014\033\015\046\020\006\023\042\024\004\070" +
    "\014\071\011\072\005\073\043\074\024\075\037\076\027" +
    "\100\017\101\041\102\051\103\021\001\002\000\054\003" +
    "\034\011\030\012\036\013\013\014\033\015\046\020\006" +
    "\023\042\024\004\034\375\070\014\071\011\072\005\073" +
    "\043\074\024\075\037\076\027\100\017\101\041\102\051" +
    "\103\021\001\002\000\036\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\021\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\035\uffbd\043\uffbd\065\uffbd\104\uffbd\001\002\000\036\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\021\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\035\uffbe\043\uffbe\065\uffbe\104" +
    "\uffbe\001\002\000\004\054\u0100\001\002\000\004\033\u0101" +
    "\001\002\000\052\003\034\011\030\012\036\013\013\014" +
    "\033\015\046\020\006\023\042\024\004\070\014\071\011" +
    "\072\005\073\043\074\024\075\037\076\027\100\017\101" +
    "\041\102\051\103\021\001\002\000\054\003\034\011\030" +
    "\012\036\013\013\014\033\015\046\020\006\023\042\024" +
    "\004\034\u0103\070\014\071\011\072\005\073\043\074\024" +
    "\075\037\076\027\100\017\101\041\102\051\103\021\001" +
    "\002\000\004\034\u0104\001\002\000\056\002\uffc0\003\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\023" +
    "\uffc0\024\uffc0\034\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\001\002\000\004\011\u0106\001\002\000\010\037\321" +
    "\052\320\053\323\001\002\000\004\017\u0108\001\002\000" +
    "\034\004\077\005\062\006\070\007\063\010\067\011\075" +
    "\021\065\025\074\026\064\027\061\035\072\043\066\065" +
    "\076\001\002\000\042\017\u010a\042\112\043\103\045\106" +
    "\046\115\047\104\050\107\051\114\055\116\056\110\057" +
    "\113\060\111\061\105\062\102\063\101\064\117\001\002" +
    "\000\004\011\u010c\001\002\000\004\036\u0110\001\002\000" +
    "\014\037\321\052\320\053\323\066\322\067\317\001\002" +
    "\000\004\036\uffc4\001\002\000\004\036\uffc3\001\002\000" +
    "\004\036\uffc5\001\002\000\004\033\u0111\001\002\000\052" +
    "\003\034\011\030\012\036\013\013\014\033\015\046\020" +
    "\006\023\042\024\004\070\014\071\011\072\005\073\043" +
    "\074\024\075\037\076\027\100\017\101\041\102\051\103" +
    "\021\001\002\000\054\003\034\011\030\012\036\013\013" +
    "\014\033\015\046\020\006\023\042\024\004\034\u0113\070" +
    "\014\071\011\072\005\073\043\074\024\075\037\076\027" +
    "\100\017\101\041\102\051\103\021\001\002\000\056\002" +
    "\uffc6\003\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\020\uffc6\023\uffc6\024\uffc6\034\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\001\002\000\056\002\uffef\003\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\015\uffef\020\uffef\023\uffef" +
    "\024\uffef\034\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074" +
    "\uffef\075\uffef\076\uffef\100\uffef\101\uffef\102\uffef\103\uffef" +
    "\001\002\000\056\002\uffe4\003\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\020\uffe4\023\uffe4\024\uffe4\034\uffe4" +
    "\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\035\072\043\066\065\076" +
    "\001\002\000\042\036\u0118\042\112\043\103\045\106\046" +
    "\115\047\104\050\107\051\114\055\116\056\110\057\113" +
    "\060\111\061\105\062\102\063\101\064\117\001\002\000" +
    "\004\017\uffec\001\002\000\004\016\u011a\001\002\000\016" +
    "\070\014\071\011\072\005\073\043\074\024\075\037\001" +
    "\002\000\010\017\uffdd\037\u011d\052\u011c\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\035\072\043\066\065\076" +
    "\001\002\000\004\040\u011e\001\002\000\006\037\u0120\052" +
    "\u011f\001\002\000\004\037\u0126\001\002\000\004\040\u0121" +
    "\001\002\000\004\052\u0122\001\002\000\004\037\u0123\001" +
    "\002\000\004\037\260\001\002\000\006\040\u0125\041\262" +
    "\001\002\000\004\017\uffdb\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\035\072\043\066\065\076\001\002\000" +
    "\006\040\u0128\041\267\001\002\000\004\017\uffdc\001\002" +
    "\000\042\017\uffde\042\112\043\103\045\106\046\115\047" +
    "\104\050\107\051\114\055\116\056\110\057\113\060\111" +
    "\061\105\062\102\063\101\064\117\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0127\000\050\002\021\003\007\012\030\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\054\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\364\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\313\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\053\012" +
    "\030\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\044\012\054" +
    "\013\025\014\043\015\044\016\034\017\024\021\031\022" +
    "\006\023\017\024\047\026\022\027\051\030\011\032\014" +
    "\033\037\034\015\035\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\072\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\173" +
    "\034\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\171\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\077\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\135\034\070\001\001\000\006\031\134\034" +
    "\070\001\001\000\006\031\133\034\070\001\001\000\006" +
    "\031\132\034\070\001\001\000\006\031\131\034\070\001" +
    "\001\000\006\031\130\034\070\001\001\000\006\031\127" +
    "\034\070\001\001\000\006\031\126\034\070\001\001\000" +
    "\006\031\125\034\070\001\001\000\006\031\124\034\070" +
    "\001\001\000\006\031\123\034\070\001\001\000\006\031" +
    "\122\034\070\001\001\000\006\031\121\034\070\001\001" +
    "\000\006\031\120\034\070\001\001\000\006\031\117\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\157\034\070\001\001\000\004\007\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\143\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\154\034" +
    "\070\001\001\000\002\001\001\000\006\031\156\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\162\034\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\165\034\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\175\034\070\001\001\000\002\001\001" +
    "\000\004\035\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\202\034\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\205\034\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\213\010\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\216" +
    "\012\030\013\025\014\043\015\044\016\034\017\024\021" +
    "\031\022\006\023\017\024\047\026\022\027\051\030\011" +
    "\032\014\033\037\034\015\035\046\001\001\000\044\012" +
    "\054\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\002\001\001" +
    "\000\004\010\225\001\001\000\002\001\001\000\046\003" +
    "\223\012\030\013\025\014\043\015\044\016\034\017\024" +
    "\021\031\022\006\023\017\024\047\026\022\027\051\030" +
    "\011\032\014\033\037\034\015\035\046\001\001\000\044" +
    "\012\054\013\025\014\043\015\044\016\034\017\024\021" +
    "\031\022\006\023\017\024\047\026\022\027\051\030\011" +
    "\032\014\033\037\034\015\035\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\227\001\001\000\002" +
    "\001\001\000\006\031\231\034\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\276\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\260\001\001\000\010\004\271\031\264\034\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\265\031\264\034\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\270\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\274\031\264\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\303\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\306\012\030\013\025\014\043" +
    "\015\044\016\034\017\024\021\031\022\006\023\017\024" +
    "\047\026\022\027\051\030\011\032\014\033\037\034\015" +
    "\035\046\001\001\000\044\012\054\013\025\014\043\015" +
    "\044\016\034\017\024\021\031\022\006\023\017\024\047" +
    "\026\022\027\051\030\011\032\014\033\037\034\015\035" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\345" +
    "\034\070\001\001\000\006\031\334\034\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\326\034\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\331\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\344\034\070" +
    "\001\001\000\006\031\340\034\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\343\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\350\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\353\012\030\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\044\012\054\013\025" +
    "\014\043\015\044\016\034\017\024\021\031\022\006\023" +
    "\017\024\047\026\022\027\051\030\011\032\014\033\037" +
    "\034\015\035\046\001\001\000\002\001\001\000\004\016" +
    "\357\001\001\000\046\003\360\012\030\013\025\014\043" +
    "\015\044\016\034\017\024\021\031\022\006\023\017\024" +
    "\047\026\022\027\051\030\011\032\014\033\037\034\015" +
    "\035\046\001\001\000\002\001\001\000\044\012\054\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\366\025\367\031\370\034\070\001\001\000\010\025\375" +
    "\031\370\034\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\373\012\030\013\025" +
    "\014\043\015\044\016\034\017\024\021\031\022\006\023" +
    "\017\024\047\026\022\027\051\030\011\032\014\033\037" +
    "\034\015\035\046\001\001\000\044\012\054\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\u0101\012" +
    "\030\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\044\012\054" +
    "\013\025\014\043\015\044\016\034\017\024\021\031\022" +
    "\006\023\017\024\047\026\022\027\051\030\011\032\014" +
    "\033\037\034\015\035\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\u0108\034\070\001\001\000" +
    "\002\001\001\000\012\015\u010e\020\u010a\022\u010c\023\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\u0111\012\030\013\025\014\043\015\044\016" +
    "\034\017\024\021\031\022\006\023\017\024\047\026\022" +
    "\027\051\030\011\032\014\033\037\034\015\035\046\001" +
    "\001\000\044\012\054\013\025\014\043\015\044\016\034" +
    "\017\024\021\031\022\006\023\017\024\047\026\022\027" +
    "\051\030\011\032\014\033\037\034\015\035\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\u0116\034\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u011a\001\001\000" +
    "\002\001\001\000\006\031\u0128\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\u0126\031\264\034\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> erroresSintacticos = new LinkedList<>();

    //Errores recuperables
    public void syntax_error(Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
        }

    //Errores no recuperables
    public void unrecovered_syntax_error (Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO NO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> start_val = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instrucciones>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= impresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Correr 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= SentMetodo 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentFor 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentWhile 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentMatch 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentReturn 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentBreak 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sentContinue 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= Llamada FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error FINCADENA 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error RKEY 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // impresion ::= IMPRIMIR PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Correr ::= RUN ID PAR1 paramLlamada PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Run(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Correr ::= RUN ID PAR1 PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Run(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Llamada ::= ID PAR1 paramLlamada PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Llamada(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Llamada ::= ID PAR1 PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Llamada(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentReturn ::= RETURN FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentReturn ::= RETURN expresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentBreak ::= BREAK FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentBreak",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentContinue ::= CONTINUE FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentContinue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= LET ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= LET ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= LET ID COLOM LIST MENOR tipos MAYOR 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionListas(a, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= LET ID COLOM tipos LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVUD(a, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= LET ID COLOM tipos LBRACKET RBRACKET LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVBD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instrucciones>> c = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVBD(a, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= CONST ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= CONST ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= CONST ID COLOM tipos LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVUD(a, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= CONST ID COLOM tipos LBRACKET RBRACKET LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVBD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instrucciones>> c = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVBD(a, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= ID IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= ID DOT APPEND PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Append(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= ID DOT GET PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Get(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= ID LBRACKET expresion RBRACKET IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVUD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= ID LBRACKET expresion RBRACKET LBRACKET expresion RBRACKET IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones d = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVBD(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_valoresVUD ::= lista_valoresVUD COMA expresion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lista_valoresVUD ::= expresion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_valoresVBD ::= lista_valoresVBD COMA LBRACKET lista_valoresVUD RBRACKET 
            {
              LinkedList<LinkedList<Instrucciones>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instrucciones>> a = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_valoresVBD ::= LBRACKET lista_valoresVUD RBRACKET 
            {
              LinkedList<LinkedList<Instrucciones>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SentMetodo ::= tipos ID PAR1 PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SentMetodo ::= tipos ID PAR1 params PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, c, d, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // params ::= params COMA parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
                                        RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // params ::= parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); 
                                        RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= ID COLOM tipos IGUAL expresion 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                                                    hm.put("tipo", a);
                                                    hm.put("id", b);
                                                    hm.put("expresion", c);
                                                    RESULT = hm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= ID COLOM tipos 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                    hm2.put("tipo", a);
                                                    hm2.put("id", b);
                                                    RESULT = hm2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramLlamada ::= paramLlamada COMA ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm = new HashMap<String, Object>();
                                                            hm.put("id", b);
                                                            hm.put("expresion", c);
                                                            RESULT = a; 
                                                            RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramLlamada ::= ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm2 = new HashMap<String, Object>();
                                                            hm2.put("id", a);
                                                            hm2.put("expresion", b);
                                                            RESULT = new LinkedList<HashMap>();
                                                            RESULT.add(hm2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseIf(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentFor ::= FOR PAR1 asignacion FINCADENA expresion FINCADENA actFor PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // actFor ::= asignacion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // actFor ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // actFor ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentWhile ::= WHILE PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentWhile ::= DO LKEY instrucciones RKEY WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentMatch ::= MATCH expresion LKEY listaCasos DEFAULT TO LKEY instrucciones RKEY RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentMatch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listaCasos ::= caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Caso>(); RESULT.add((Caso)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listaCasos ::= listaCasos caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; a.add((Caso)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // caso ::= expresion TO LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // insIncremento ::= ID INCREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // insIncremento ::= ID INCREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // insDecremento ::= ID DECREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // insDecremento ::= ID DECREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGATIVO, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion MAS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion POR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion DIVISION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion POTENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion RAIZ expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RAIZ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion MODULO expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion IGUALACION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion DIFERENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion MAYOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion MENOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion MENORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion AND expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion OR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= NOT expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= CAST PAR1 expresion AS tipos PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casteos(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= ROUND PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= LENGTH PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Length(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= TOSTRING PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= ENTERO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= DECIMAL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= CARACTER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= CADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= BOOLEANO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= ID 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= ID DOT GET PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Get(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= ID LBRACKET expresion RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVUD(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= ID LBRACKET expresion RBRACKET LBRACKET expresion RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVBD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= Llamada 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipos ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipos ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipos ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
