
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instrucciones;
import simbolo.*;
import excepciones.Errores;
import instrucciones.Run;
import instrucciones.Llamada;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVUD;
import instrucciones.DeclaracionVBD;
import instrucciones.DeclaracionListas;
import instrucciones.AsignacionVar;
import instrucciones.AsignacionVUD;
import instrucciones.AsignacionVBD;
import instrucciones.Append;
import instrucciones.Reverse;
import instrucciones.Metodo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.IfElseIf;
import instrucciones.IfElse;
import instrucciones.If;
import instrucciones.Caso;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Return;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.Casteos;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.AccesoVar;
import expresiones.Get;
import expresiones.Remove;
import expresiones.Pop;
import expresiones.AccesoVUD;
import expresiones.AccesoVBD;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\013\006\000" +
    "\002\033\010\000\002\033\007\000\002\034\006\000\002" +
    "\034\005\000\002\030\004\000\002\030\005\000\002\026" +
    "\004\000\002\027\004\000\002\014\010\000\002\014\006" +
    "\000\002\014\011\000\002\014\014\000\002\014\016\000" +
    "\002\014\010\000\002\014\006\000\002\014\014\000\002" +
    "\014\016\000\002\015\005\000\002\015\010\000\002\015" +
    "\007\000\002\015\010\000\002\015\010\000\002\015\012" +
    "\000\002\015\013\000\002\004\005\000\002\004\003\000" +
    "\002\005\007\000\002\005\005\000\002\032\011\000\002" +
    "\032\012\000\002\006\005\000\002\006\003\000\002\010" +
    "\007\000\002\010\005\000\002\007\007\000\002\007\005" +
    "\000\002\016\011\000\002\016\015\000\002\016\013\000" +
    "\002\017\015\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\011\000\002\021\013\000\002\024" +
    "\014\000\002\011\003\000\002\011\004\000\002\025\007" +
    "\000\002\022\005\000\002\022\004\000\002\023\005\000" +
    "\002\023\004\000\002\031\004\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\004\000\002\031\010\000\002\031" +
    "\006\000\002\031\006\000\002\031\006\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\005\000\002\031\003\000\002" +
    "\031\010\000\002\031\010\000\002\031\007\000\002\031" +
    "\006\000\002\031\011\000\002\031\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\052\003\034\011\030\012\036\013\013\014" +
    "\033\015\046\020\006\023\042\024\004\074\014\075\011" +
    "\076\005\077\043\100\024\101\037\102\027\104\017\105" +
    "\041\106\051\107\021\001\002\000\004\011\u0129\001\002" +
    "\000\020\011\uff92\017\uff92\042\uff92\043\uff92\045\uff92\056" +
    "\uff92\063\uff92\001\002\000\004\041\u0126\001\002\000\056" +
    "\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\020\ufff9\023\ufff9\024\ufff9\040\ufff9\074\ufff9\075\ufff9" +
    "\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\104\ufff9\105" +
    "\ufff9\106\ufff9\107\ufff9\001\002\000\054\002\000\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\074\014\075\011\076\005\077\043\100\024" +
    "\101\037\102\027\104\017\105\041\106\051\107\021\001" +
    "\002\000\020\011\uff93\017\uff93\042\uff93\043\uff93\045\uff93" +
    "\056\uff93\063\uff93\001\002\000\056\002\ufff2\003\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\023\ufff2" +
    "\024\ufff2\040\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100" +
    "\ufff2\101\ufff2\102\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2" +
    "\001\002\000\004\017\u0125\001\002\000\020\011\uff94\017" +
    "\uff94\042\uff94\043\uff94\045\uff94\056\uff94\063\uff94\001\002" +
    "\000\056\002\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7\040\ufff7\074\ufff7" +
    "\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\104" +
    "\ufff7\105\ufff7\106\ufff7\107\ufff7\001\002\000\004\017\u0124" +
    "\001\002\000\004\041\u0115\001\002\000\056\002\ufff8\003" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8" +
    "\023\ufff8\024\ufff8\040\ufff8\074\ufff8\075\ufff8\076\ufff8\077" +
    "\ufff8\100\ufff8\101\ufff8\102\ufff8\104\ufff8\105\ufff8\106\ufff8" +
    "\107\ufff8\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\041\073\047\066\071\076\001\002\000\004\002\u0104\001" +
    "\002\000\056\002\ufff1\003\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\020\ufff1\023\ufff1\024\ufff1\040\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1" +
    "\104\ufff1\105\ufff1\106\ufff1\107\ufff1\001\002\000\020\011" +
    "\uff90\017\uff90\042\uff90\043\uff90\045\uff90\056\uff90\063\uff90" +
    "\001\002\000\056\002\ufff5\003\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\020\ufff5\023\ufff5\024\ufff5\040\ufff5" +
    "\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\101\ufff5\102" +
    "\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\001\002\000\004" +
    "\017\u0103\001\002\000\004\041\370\001\002\000\016\041" +
    "\140\043\330\056\327\057\332\072\331\073\326\001\002" +
    "\000\056\002\ufffe\003\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\020\ufffe\023\ufffe\024\ufffe\040\ufffe\074\ufffe" +
    "\075\ufffe\076\ufffe\077\ufffe\100\ufffe\101\ufffe\102\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\001\002\000\056\002\ufff4" +
    "\003\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020" +
    "\ufff4\023\ufff4\024\ufff4\040\ufff4\074\ufff4\075\ufff4\076\ufff4" +
    "\077\ufff4\100\ufff4\101\ufff4\102\ufff4\104\ufff4\105\ufff4\106" +
    "\ufff4\107\ufff4\001\002\000\036\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\017\324\021\065\025\074\026" +
    "\064\027\061\041\073\047\066\071\076\001\002\000\006" +
    "\017\321\040\322\001\002\000\056\002\ufff6\003\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\023\ufff6" +
    "\024\ufff6\040\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\100" +
    "\ufff6\101\ufff6\102\ufff6\104\ufff6\105\ufff6\106\ufff6\107\ufff6" +
    "\001\002\000\004\017\320\001\002\000\020\011\uff8f\017" +
    "\uff8f\042\uff8f\043\uff8f\045\uff8f\056\uff8f\063\uff8f\001\002" +
    "\000\056\002\ufffc\003\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\020\ufffc\023\ufffc\024\ufffc\040\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc\104" +
    "\ufffc\105\ufffc\106\ufffc\107\ufffc\001\002\000\004\041\312" +
    "\001\002\000\004\011\253\001\002\000\020\011\uff91\017" +
    "\uff91\042\uff91\043\uff91\045\uff91\056\uff91\063\uff91\001\002" +
    "\000\004\017\252\001\002\000\004\017\251\001\002\000" +
    "\004\011\242\001\002\000\004\011\217\001\002\000\056" +
    "\002\ufff3\003\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\020\ufff3\023\ufff3\024\ufff3\040\ufff3\074\ufff3\075\ufff3" +
    "\076\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\104\ufff3\105" +
    "\ufff3\106\ufff3\107\ufff3\001\002\000\004\037\053\001\002" +
    "\000\056\002\ufff0\003\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\020\ufff0\023\ufff0\024\ufff0\040\ufff0\074\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\104" +
    "\ufff0\105\ufff0\106\ufff0\107\ufff0\001\002\000\052\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\074\014\075\011\076\005\077\043\100\024" +
    "\101\037\102\027\104\017\105\041\106\051\107\021\001" +
    "\002\000\054\003\034\011\030\012\036\013\013\014\033" +
    "\015\046\020\006\023\042\024\004\040\056\074\014\075" +
    "\011\076\005\077\043\100\024\101\037\102\027\104\017" +
    "\105\041\106\051\107\021\001\002\000\056\002\uffff\003" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\020\uffff" +
    "\023\uffff\024\uffff\040\uffff\074\uffff\075\uffff\076\uffff\077" +
    "\uffff\100\uffff\101\uffff\102\uffff\104\uffff\105\uffff\106\uffff" +
    "\107\uffff\001\002\000\004\105\057\001\002\000\004\041" +
    "\060\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\041" +
    "\073\047\066\071\076\001\002\000\004\041\214\001\002" +
    "\000\056\017\uff9e\022\uff9e\037\uff9e\042\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\001\002\000\056\017\uffa0" +
    "\022\uffa0\037\uffa0\042\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\uffa0\070\uffa0\001\002\000\004\041\211\001\002\000\004" +
    "\041\204\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\041\073\047\066\071\076\001\002\000\056\017\uff9d\022" +
    "\uff9d\037\uff9d\042\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\001\002\000\056\017\uffa1\022\uffa1\037\uffa1\042" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\054\uffa1\055\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\001\002" +
    "\000\056\017\uff95\022\uff95\037\uff95\042\uff95\044\uff95\045" +
    "\uff95\046\uff95\047\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\055\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065" +
    "\uff95\066\uff95\067\uff95\070\uff95\001\002\000\042\042\201" +
    "\046\111\047\103\051\106\052\115\053\104\054\107\055" +
    "\114\061\116\062\110\063\113\064\112\065\105\066\102" +
    "\067\101\070\117\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\041\073\047\066\071\076\001\002\000\004\041" +
    "\174\001\002\000\064\017\uff9b\022\uff9b\037\uff9b\041\140" +
    "\042\uff9b\043\137\044\uff9b\045\uff9b\046\uff9b\047\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\057\141\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\070\uff9b\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\041\073\047\066\071\076\001\002\000\056\017\uff9f" +
    "\022\uff9f\037\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\060\uff9f" +
    "\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067" +
    "\uff9f\070\uff9f\001\002\000\056\017\uffa6\022\uffa6\037\uffa6" +
    "\042\uffa6\044\uffa6\045\uffa6\046\111\047\103\051\106\052" +
    "\115\053\104\054\107\055\114\060\uffa6\061\116\062\110" +
    "\063\113\064\112\065\105\066\102\067\uffa6\070\uffa6\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\041\073\047" +
    "\066\071\076\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\041\073\047\066\071\076\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\041\073\047\066\071\076\001\002" +
    "\000\034\004\077\005\062\006\070\007\063\010\067\011" +
    "\075\021\065\025\074\026\064\027\061\041\073\047\066" +
    "\071\076\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\041\073\047\066\071\076\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\041\073\047\066\071\076\001\002\000" +
    "\034\004\077\005\062\006\070\007\063\010\067\011\075" +
    "\021\065\025\074\026\064\027\061\041\073\047\066\071" +
    "\076\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\041" +
    "\073\047\066\071\076\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\041\073\047\066\071\076\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\041\073\047\066\071\076" +
    "\001\002\000\034\004\077\005\062\006\070\007\063\010" +
    "\067\011\075\021\065\025\074\026\064\027\061\041\073" +
    "\047\066\071\076\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\041\073\047\066\071\076\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\041\073\047\066\071\076\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\041\073\047" +
    "\066\071\076\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\041\073\047\066\071\076\001\002\000\056\017\uffa7" +
    "\022\uffa7\037\uffa7\042\uffa7\044\uffa7\045\uffa7\046\111\047" +
    "\103\051\106\052\115\053\104\054\107\055\114\060\uffa7" +
    "\061\116\062\110\063\113\064\112\065\105\066\102\067" +
    "\101\070\uffa7\001\002\000\056\017\uffae\022\uffae\037\uffae" +
    "\042\uffae\044\uffae\045\uffae\046\111\047\103\051\106\052" +
    "\115\053\104\054\107\055\114\060\uffae\061\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\001" +
    "\002\000\056\017\uffb2\022\uffb2\037\uffb2\042\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053\104\054" +
    "\107\055\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\067\uffb2\070\uffb2\001\002\000\056\017" +
    "\uffaf\022\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\051\uffaf\052\uffaf\053\104\054\107\055\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\001\002\000\056\017\uffac\022\uffac\037" +
    "\uffac\042\uffac\044\uffac\045\uffac\046\111\047\103\051\106" +
    "\052\115\053\104\054\107\055\114\060\uffac\061\uffac\062" +
    "\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac" +
    "\001\002\000\056\017\uffab\022\uffab\037\uffab\042\uffab\044" +
    "\uffab\045\uffab\046\111\047\103\051\106\052\115\053\104" +
    "\054\107\055\114\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\070\uffab\001\002\000\056" +
    "\017\uffb5\022\uffb5\037\uffb5\042\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\051\106\052\115\053\104\054\107\055\114" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\001\002\000\056\017\uffad\022\uffad" +
    "\037\uffad\042\uffad\044\uffad\045\uffad\046\111\047\103\051" +
    "\106\052\115\053\104\054\107\055\114\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\001\002\000\052\017\uffb0\022\uffb0\037\uffb0\042\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0\055" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\067\uffb0\070\uffb0\001\002\000\056\017\uffb3\022" +
    "\uffb3\037\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\051\uffb3\052\uffb3\053\104\054\107\055\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\001\002\000\056\017\uffaa\022\uffaa\037\uffaa\042" +
    "\uffaa\044\uffaa\045\uffaa\046\111\047\103\051\106\052\115" +
    "\053\104\054\107\055\114\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002" +
    "\000\052\017\uffb1\022\uffb1\037\uffb1\042\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1\055\uffb1\060\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067" +
    "\uffb1\070\uffb1\001\002\000\056\017\uffb4\022\uffb4\037\uffb4" +
    "\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\051\106\052" +
    "\115\053\104\054\107\055\114\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\001" +
    "\002\000\056\017\uffa9\022\uffa9\037\uffa9\042\uffa9\044\uffa9" +
    "\045\uffa9\046\111\047\103\051\106\052\115\053\104\054" +
    "\107\055\114\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\001\002\000\056\017" +
    "\uffa8\022\uffa8\037\uffa8\042\uffa8\044\uffa8\045\uffa8\046\111" +
    "\047\103\051\106\052\115\053\104\054\107\055\114\060" +
    "\uffa8\061\116\062\110\063\113\064\112\065\105\066\102" +
    "\067\uffa8\070\uffa8\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\041\073\047\066\071\076\001\002\000\006\011" +
    "\155\042\157\001\002\000\010\032\142\034\143\035\144" +
    "\001\002\000\004\041\152\001\002\000\004\041\147\001" +
    "\002\000\004\041\145\001\002\000\004\042\146\001\002" +
    "\000\056\017\uff98\022\uff98\037\uff98\042\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\070\uff98\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\041\073\047\066\071\076\001\002" +
    "\000\042\042\151\046\111\047\103\051\106\052\115\053" +
    "\104\054\107\055\114\061\116\062\110\063\113\064\112" +
    "\065\105\066\102\067\101\070\117\001\002\000\056\017" +
    "\uff99\022\uff99\037\uff99\042\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\041\073\047\066\071\076\001\002\000\042\042" +
    "\154\046\111\047\103\051\106\052\115\053\104\054\107" +
    "\055\114\061\116\062\110\063\113\064\112\065\105\066" +
    "\102\067\101\070\117\001\002\000\056\017\uff9a\022\uff9a" +
    "\037\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\001\002\000\004\056\165\001\002\000\006\042\161" +
    "\045\160\001\002\000\056\017\uffe8\022\uffe8\037\uffe8\042" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\001\002" +
    "\000\004\011\162\001\002\000\056\017\uffe9\022\uffe9\037" +
    "\uffe9\042\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\001\002\000\004\056\163\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\041\073\047\066\071\076\001\002\000" +
    "\044\042\uffc9\045\uffc9\046\111\047\103\051\106\052\115" +
    "\053\104\054\107\055\114\061\116\062\110\063\113\064" +
    "\112\065\105\066\102\067\101\070\117\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\041\073\047\066\071\076" +
    "\001\002\000\044\042\uffc8\045\uffc8\046\111\047\103\051" +
    "\106\052\115\053\104\054\107\055\114\061\116\062\110" +
    "\063\113\064\112\065\105\066\102\067\101\070\117\001" +
    "\002\000\042\044\170\046\111\047\103\051\106\052\115" +
    "\053\104\054\107\055\114\061\116\062\110\063\113\064" +
    "\112\065\105\066\102\067\101\070\117\001\002\000\060" +
    "\017\uff97\022\uff97\037\uff97\042\uff97\043\171\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\041\073\047\066\071\076\001\002" +
    "\000\042\044\173\046\111\047\103\051\106\052\115\053" +
    "\104\054\107\055\114\061\116\062\110\063\113\064\112" +
    "\065\105\066\102\067\101\070\117\001\002\000\056\017" +
    "\uff96\022\uff96\037\uff96\042\uff96\044\uff96\045\uff96\046\uff96" +
    "\047\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\060" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\001\002\000\034\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\041\073\047\066\071\076\001\002\000\042\042" +
    "\176\046\111\047\103\051\106\052\115\053\104\054\107" +
    "\055\114\061\116\062\110\063\113\064\112\065\105\066" +
    "\102\067\101\070\117\001\002\000\056\017\uffa4\022\uffa4" +
    "\037\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\001\002\000\042\042\200\046\111\047\103\051\106" +
    "\052\115\053\104\054\107\055\114\061\116\062\110\063" +
    "\113\064\112\065\105\066\102\067\101\070\117\001\002" +
    "\000\056\017\uff9c\022\uff9c\037\uff9c\042\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\001\002\000\004\017\202" +
    "\001\002\000\056\002\uffbf\003\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\020\uffbf\023\uffbf\024\uffbf\040\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\001\002\000\056" +
    "\017\uffb6\022\uffb6\037\uffb6\042\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\041\073\047\066\071\076\001\002\000\042" +
    "\022\206\046\111\047\103\051\106\052\115\053\104\054" +
    "\107\055\114\061\116\062\110\063\113\064\112\065\105" +
    "\066\102\067\101\070\117\001\002\000\016\074\014\075" +
    "\011\076\005\077\043\100\024\101\037\001\002\000\004" +
    "\042\210\001\002\000\056\017\uffa5\022\uffa5\037\uffa5\042" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\001\002" +
    "\000\034\004\077\005\062\006\070\007\063\010\067\011" +
    "\075\021\065\025\074\026\064\027\061\041\073\047\066" +
    "\071\076\001\002\000\042\042\213\046\111\047\103\051" +
    "\106\052\115\053\104\054\107\055\114\061\116\062\110" +
    "\063\113\064\112\065\105\066\102\067\101\070\117\001" +
    "\002\000\056\017\uffa3\022\uffa3\037\uffa3\042\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\070\uffa3\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\041\073\047\066\071\076\001" +
    "\002\000\042\042\216\046\111\047\103\051\106\052\115" +
    "\053\104\054\107\055\114\061\116\062\110\063\113\064" +
    "\112\065\105\066\102\067\101\070\117\001\002\000\056" +
    "\017\uffa2\022\uffa2\037\uffa2\042\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\001\002\000\004\041\220\001\002" +
    "\000\006\011\221\042\223\001\002\000\004\016\236\001" +
    "\002\000\006\042\uffcc\045\uffcc\001\002\000\004\037\233" +
    "\001\002\000\006\042\226\045\225\001\002\000\004\011" +
    "\221\001\002\000\004\037\227\001\002\000\052\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\074\014\075\011\076\005\077\043\100\024" +
    "\101\037\102\027\104\017\105\041\106\051\107\021\001" +
    "\002\000\054\003\034\011\030\012\036\013\013\014\033" +
    "\015\046\020\006\023\042\024\004\040\231\074\014\075" +
    "\011\076\005\077\043\100\024\101\037\102\027\104\017" +
    "\105\041\106\051\107\021\001\002\000\056\002\uffce\003" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\020\uffce" +
    "\023\uffce\024\uffce\040\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\102\uffce\104\uffce\105\uffce\106\uffce" +
    "\107\uffce\001\002\000\006\042\uffcd\045\uffcd\001\002\000" +
    "\052\003\034\011\030\012\036\013\013\014\033\015\046" +
    "\020\006\023\042\024\004\074\014\075\011\076\005\077" +
    "\043\100\024\101\037\102\027\104\017\105\041\106\051" +
    "\107\021\001\002\000\054\003\034\011\030\012\036\013" +
    "\013\014\033\015\046\020\006\023\042\024\004\040\235" +
    "\074\014\075\011\076\005\077\043\100\024\101\037\102" +
    "\027\104\017\105\041\106\051\107\021\001\002\000\056" +
    "\002\uffcf\003\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\020\uffcf\023\uffcf\024\uffcf\040\uffcf\074\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\107\uffcf\001\002\000\016\074\014\075\011" +
    "\076\005\077\043\100\024\101\037\001\002\000\010\042" +
    "\uffca\045\uffca\056\240\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\041\073\047\066\071\076\001\002\000\044" +
    "\042\uffcb\045\uffcb\046\111\047\103\051\106\052\115\053" +
    "\104\054\107\055\114\061\116\062\110\063\113\064\112" +
    "\065\105\066\102\067\101\070\117\001\002\000\004\041" +
    "\243\001\002\000\006\011\155\042\245\001\002\000\006" +
    "\042\247\045\160\001\002\000\004\017\246\001\002\000" +
    "\056\002\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\020\uffea\023\uffea\024\uffea\040\uffea\074\uffea\075" +
    "\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\001\002\000\004\017\250\001" +
    "\002\000\056\002\uffeb\003\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\020\uffeb\023\uffeb\024\uffeb\040\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb" +
    "\104\uffeb\105\uffeb\106\uffeb\107\uffeb\001\002\000\056\002" +
    "\ufffa\003\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\023\ufffa\024\ufffa\040\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\104\ufffa\105\ufffa" +
    "\106\ufffa\107\ufffa\001\002\000\056\002\ufffb\003\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\023\ufffb" +
    "\024\ufffb\040\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100" +
    "\ufffb\101\ufffb\102\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb" +
    "\001\002\000\004\016\254\001\002\000\020\030\255\074" +
    "\014\075\011\076\005\077\043\100\024\101\037\001\002" +
    "\000\004\065\307\001\002\000\010\017\uffe2\043\260\056" +
    "\257\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\041" +
    "\073\047\066\071\076\001\002\000\004\044\261\001\002" +
    "\000\006\043\263\056\262\001\002\000\004\043\303\001" +
    "\002\000\004\044\264\001\002\000\004\056\265\001\002" +
    "\000\004\043\266\001\002\000\004\043\267\001\002\000" +
    "\034\004\077\005\062\006\070\007\063\010\067\011\075" +
    "\021\065\025\074\026\064\027\061\041\073\047\066\071" +
    "\076\001\002\000\006\044\272\045\271\001\002\000\004" +
    "\043\273\001\002\000\004\017\uffdf\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\041\073\047\066\071\076\001" +
    "\002\000\044\044\uffd2\045\uffd2\046\111\047\103\051\106" +
    "\052\115\053\104\054\107\055\114\061\116\062\110\063" +
    "\113\064\112\065\105\066\102\067\101\070\117\001\002" +
    "\000\006\044\277\045\276\001\002\000\034\004\077\005" +
    "\062\006\070\007\063\010\067\011\075\021\065\025\074" +
    "\026\064\027\061\041\073\047\066\071\076\001\002\000" +
    "\006\044\uffd1\045\uffd1\001\002\000\044\044\uffd3\045\uffd3" +
    "\046\111\047\103\051\106\052\115\053\104\054\107\055" +
    "\114\061\116\062\110\063\113\064\112\065\105\066\102" +
    "\067\101\070\117\001\002\000\006\044\302\045\276\001" +
    "\002\000\006\044\uffd0\045\uffd0\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\041\073\047\066\071\076\001\002" +
    "\000\006\044\305\045\276\001\002\000\004\017\uffe0\001" +
    "\002\000\042\017\uffe3\046\111\047\103\051\106\052\115" +
    "\053\104\054\107\055\114\061\116\062\110\063\113\064" +
    "\112\065\105\066\102\067\101\070\117\001\002\000\016" +
    "\074\014\075\011\076\005\077\043\100\024\101\037\001" +
    "\002\000\004\063\311\001\002\000\004\017\uffe1\001\002" +
    "\000\034\004\077\005\062\006\070\007\063\010\067\011" +
    "\075\021\065\025\074\026\064\027\061\041\073\047\066" +
    "\071\076\001\002\000\042\042\314\046\111\047\103\051" +
    "\106\052\115\053\104\054\107\055\114\061\116\062\110" +
    "\063\113\064\112\065\105\066\102\067\101\070\117\001" +
    "\002\000\004\037\315\001\002\000\052\003\034\011\030" +
    "\012\036\013\013\014\033\015\046\020\006\023\042\024" +
    "\004\074\014\075\011\076\005\077\043\100\024\101\037" +
    "\102\027\104\017\105\041\106\051\107\021\001\002\000" +
    "\054\003\034\011\030\012\036\013\013\014\033\015\046" +
    "\020\006\023\042\024\004\040\317\074\014\075\011\076" +
    "\005\077\043\100\024\101\037\102\027\104\017\105\041" +
    "\106\051\107\021\001\002\000\056\002\uffc0\003\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\023\uffc0" +
    "\024\uffc0\040\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0" +
    "\001\002\000\056\002\uffe5\003\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\020\uffe5\023\uffe5\024\uffe5\040\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5\001\002\000\056" +
    "\002\uffee\003\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\020\uffee\023\uffee\024\uffee\040\uffee\074\uffee\075\uffee" +
    "\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee\104\uffee\105" +
    "\uffee\106\uffee\107\uffee\001\002\000\056\002\uffed\003\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\023" +
    "\uffed\024\uffed\040\uffed\074\uffed\075\uffed\076\uffed\077\uffed" +
    "\100\uffed\101\uffed\102\uffed\104\uffed\105\uffed\106\uffed\107" +
    "\uffed\001\002\000\042\017\325\046\111\047\103\051\106" +
    "\052\115\053\104\054\107\055\114\061\116\062\110\063" +
    "\113\064\112\065\105\066\102\067\101\070\117\001\002" +
    "\000\056\002\uffe7\003\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\020\uffe7\023\uffe7\024\uffe7\040\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\104" +
    "\uffe7\105\uffe7\106\uffe7\107\uffe7\001\002\000\056\002\uffe6" +
    "\003\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\020" +
    "\uffe6\023\uffe6\024\uffe6\040\uffe6\074\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\100\uffe6\101\uffe6\102\uffe6\104\uffe6\105\uffe6\106" +
    "\uffe6\107\uffe6\001\002\000\062\002\uffb7\003\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\017\367\020\uffb7\023" +
    "\uffb7\024\uffb7\040\uffb7\042\uffb7\074\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\101\uffb7\102\uffb7\104\uffb7\105\uffb7\106" +
    "\uffb7\107\uffb7\001\002\000\034\004\077\005\062\006\070" +
    "\007\063\010\067\011\075\021\065\025\074\026\064\027" +
    "\061\041\073\047\066\071\076\001\002\000\034\004\077" +
    "\005\062\006\070\007\063\010\067\011\075\021\065\025" +
    "\074\026\064\027\061\041\073\047\066\071\076\001\002" +
    "\000\062\002\uffb9\003\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\017\354\020\uffb9\023\uffb9\024\uffb9\040\uffb9" +
    "\042\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101" +
    "\uffb9\102\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\001\002" +
    "\000\012\031\334\033\333\034\336\036\335\001\002\000" +
    "\004\041\347\001\002\000\004\041\344\001\002\000\004" +
    "\041\342\001\002\000\004\041\337\001\002\000\034\004" +
    "\077\005\062\006\070\007\063\010\067\011\075\021\065" +
    "\025\074\026\064\027\061\041\073\047\066\071\076\001" +
    "\002\000\042\042\341\046\111\047\103\051\106\052\115" +
    "\053\104\054\107\055\114\061\116\062\110\063\113\064" +
    "\112\065\105\066\102\067\101\070\117\001\002\000\006" +
    "\017\uffd7\042\uffd7\001\002\000\004\042\343\001\002\000" +
    "\006\017\uffd8\042\uffd8\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\041\073\047\066\071\076\001\002\000\042" +
    "\042\346\046\111\047\103\051\106\052\115\053\104\054" +
    "\107\055\114\061\116\062\110\063\113\064\112\065\105" +
    "\066\102\067\101\070\117\001\002\000\006\017\uffd9\042" +
    "\uffd9\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\041" +
    "\073\047\066\071\076\001\002\000\042\045\351\046\111" +
    "\047\103\051\106\052\115\053\104\054\107\055\114\061" +
    "\116\062\110\063\113\064\112\065\105\066\102\067\101" +
    "\070\117\001\002\000\034\004\077\005\062\006\070\007" +
    "\063\010\067\011\075\021\065\025\074\026\064\027\061" +
    "\041\073\047\066\071\076\001\002\000\042\042\353\046" +
    "\111\047\103\051\106\052\115\053\104\054\107\055\114" +
    "\061\116\062\110\063\113\064\112\065\105\066\102\067" +
    "\101\070\117\001\002\000\006\017\uffd5\042\uffd5\001\002" +
    "\000\060\002\uffba\003\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\020\uffba\023\uffba\024\uffba\040\uffba\042\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102" +
    "\uffba\104\uffba\105\uffba\106\uffba\107\uffba\001\002\000\042" +
    "\044\356\046\111\047\103\051\106\052\115\053\104\054" +
    "\107\055\114\061\116\062\110\063\113\064\112\065\105" +
    "\066\102\067\101\070\117\001\002\000\006\043\360\056" +
    "\357\001\002\000\034\004\077\005\062\006\070\007\063" +
    "\010\067\011\075\021\065\025\074\026\064\027\061\041" +
    "\073\047\066\071\076\001\002\000\034\004\077\005\062" +
    "\006\070\007\063\010\067\011\075\021\065\025\074\026" +
    "\064\027\061\041\073\047\066\071\076\001\002\000\042" +
    "\044\362\046\111\047\103\051\106\052\115\053\104\054" +
    "\107\055\114\061\116\062\110\063\113\064\112\065\105" +
    "\066\102\067\101\070\117\001\002\000\004\056\363\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\041\073\047" +
    "\066\071\076\001\002\000\044\017\uffd4\042\uffd4\046\111" +
    "\047\103\051\106\052\115\053\104\054\107\055\114\061" +
    "\116\062\110\063\113\064\112\065\105\066\102\067\101" +
    "\070\117\001\002\000\044\017\uffd6\042\uffd6\046\111\047" +
    "\103\051\106\052\115\053\104\054\107\055\114\061\116" +
    "\062\110\063\113\064\112\065\105\066\102\067\101\070" +
    "\117\001\002\000\044\017\uffda\042\uffda\046\111\047\103" +
    "\051\106\052\115\053\104\054\107\055\114\061\116\062" +
    "\110\063\113\064\112\065\105\066\102\067\101\070\117" +
    "\001\002\000\060\002\uffb8\003\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\020\uffb8\023\uffb8\024\uffb8\040\uffb8" +
    "\042\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101" +
    "\uffb8\102\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\001\002" +
    "\000\034\004\077\005\062\006\070\007\063\010\067\011" +
    "\075\021\065\025\074\026\064\027\061\041\073\047\066" +
    "\071\076\001\002\000\042\042\372\046\111\047\103\051" +
    "\106\052\115\053\104\054\107\055\114\061\116\062\110" +
    "\063\113\064\112\065\105\066\102\067\101\070\117\001" +
    "\002\000\004\037\373\001\002\000\052\003\034\011\030" +
    "\012\036\013\013\014\033\015\046\020\006\023\042\024" +
    "\004\074\014\075\011\076\005\077\043\100\024\101\037" +
    "\102\027\104\017\105\041\106\051\107\021\001\002\000" +
    "\054\003\034\011\030\012\036\013\013\014\033\015\046" +
    "\020\006\023\042\024\004\040\375\074\014\075\011\076" +
    "\005\077\043\100\024\101\037\102\027\104\017\105\041" +
    "\106\051\107\021\001\002\000\060\002\uffc7\003\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\020\uffc7\023\uffc7" +
    "\024\uffc7\040\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\102\uffc7\103\376\104\uffc7\105\uffc7\106\uffc7" +
    "\107\uffc7\001\002\000\006\037\377\102\027\001\002\000" +
    "\052\003\034\011\030\012\036\013\013\014\033\015\046" +
    "\020\006\023\042\024\004\074\014\075\011\076\005\077" +
    "\043\100\024\101\037\102\027\104\017\105\041\106\051" +
    "\107\021\001\002\000\056\002\uffc5\003\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\023\uffc5\024\uffc5" +
    "\040\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101" +
    "\uffc5\102\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\001\002" +
    "\000\054\003\034\011\030\012\036\013\013\014\033\015" +
    "\046\020\006\023\042\024\004\040\u0102\074\014\075\011" +
    "\076\005\077\043\100\024\101\037\102\027\104\017\105" +
    "\041\106\051\107\021\001\002\000\056\002\uffc6\003\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6\023" +
    "\uffc6\024\uffc6\040\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\104\uffc6\105\uffc6\106\uffc6\107" +
    "\uffc6\001\002\000\056\002\ufffd\003\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\020\ufffd\023\ufffd\024\ufffd\040" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd" +
    "\102\ufffd\104\ufffd\105\ufffd\106\ufffd\107\ufffd\001\002\000" +
    "\004\002\001\001\002\000\042\037\u0106\046\111\047\103" +
    "\051\106\052\115\053\104\054\107\055\114\061\116\062" +
    "\110\063\113\064\112\065\105\066\102\067\101\070\117" +
    "\001\002\000\034\004\077\005\062\006\070\007\063\010" +
    "\067\011\075\021\065\025\074\026\064\027\061\041\073" +
    "\047\066\071\076\001\002\000\036\004\077\005\062\006" +
    "\070\007\063\010\067\011\075\021\065\025\074\026\064" +
    "\027\061\041\073\047\066\071\076\110\u010f\001\002\000" +
    "\036\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\021\uffbd\025\uffbd\026\uffbd\027\uffbd\041\uffbd\047\uffbd\071" +
    "\uffbd\110\uffbd\001\002\000\042\046\111\047\103\051\106" +
    "\052\115\053\104\054\107\055\114\060\u010a\061\116\062" +
    "\110\063\113\064\112\065\105\066\102\067\101\070\117" +
    "\001\002\000\004\037\u010b\001\002\000\052\003\034\011" +
    "\030\012\036\013\013\014\033\015\046\020\006\023\042" +
    "\024\004\074\014\075\011\076\005\077\043\100\024\101" +
    "\037\102\027\104\017\105\041\106\051\107\021\001\002" +
    "\000\054\003\034\011\030\012\036\013\013\014\033\015" +
    "\046\020\006\023\042\024\004\040\u010d\074\014\075\011" +
    "\076\005\077\043\100\024\101\037\102\027\104\017\105" +
    "\041\106\051\107\021\001\002\000\036\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\021\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\041\uffbb\047\uffbb\071\uffbb\110\uffbb\001\002" +
    "\000\036\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\021\uffbc\025\uffbc\026\uffbc\027\uffbc\041\uffbc\047\uffbc" +
    "\071\uffbc\110\uffbc\001\002\000\004\060\u0110\001\002\000" +
    "\004\037\u0111\001\002\000\052\003\034\011\030\012\036" +
    "\013\013\014\033\015\046\020\006\023\042\024\004\074" +
    "\014\075\011\076\005\077\043\100\024\101\037\102\027" +
    "\104\017\105\041\106\051\107\021\001\002\000\054\003" +
    "\034\011\030\012\036\013\013\014\033\015\046\020\006" +
    "\023\042\024\004\040\u0113\074\014\075\011\076\005\077" +
    "\043\100\024\101\037\102\027\104\017\105\041\106\051" +
    "\107\021\001\002\000\004\040\u0114\001\002\000\056\002" +
    "\uffbe\003\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\020\uffbe\023\uffbe\024\uffbe\040\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\001\002\000\004\011\u0116\001\002\000" +
    "\010\043\330\056\327\057\332\001\002\000\004\017\u0118" +
    "\001\002\000\034\004\077\005\062\006\070\007\063\010" +
    "\067\011\075\021\065\025\074\026\064\027\061\041\073" +
    "\047\066\071\076\001\002\000\042\017\u011a\046\111\047" +
    "\103\051\106\052\115\053\104\054\107\055\114\061\116" +
    "\062\110\063\113\064\112\065\105\066\102\067\101\070" +
    "\117\001\002\000\004\011\u011c\001\002\000\004\042\u0120" +
    "\001\002\000\014\043\330\056\327\057\332\072\331\073" +
    "\326\001\002\000\004\042\uffc2\001\002\000\004\042\uffc1" +
    "\001\002\000\004\042\uffc3\001\002\000\004\037\u0121\001" +
    "\002\000\052\003\034\011\030\012\036\013\013\014\033" +
    "\015\046\020\006\023\042\024\004\074\014\075\011\076" +
    "\005\077\043\100\024\101\037\102\027\104\017\105\041" +
    "\106\051\107\021\001\002\000\054\003\034\011\030\012" +
    "\036\013\013\014\033\015\046\020\006\023\042\024\004" +
    "\040\u0123\074\014\075\011\076\005\077\043\100\024\101" +
    "\037\102\027\104\017\105\041\106\051\107\021\001\002" +
    "\000\056\002\uffc4\003\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\020\uffc4\023\uffc4\024\uffc4\040\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\001\002\000\056\002\uffef" +
    "\003\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\020" +
    "\uffef\023\uffef\024\uffef\040\uffef\074\uffef\075\uffef\076\uffef" +
    "\077\uffef\100\uffef\101\uffef\102\uffef\104\uffef\105\uffef\106" +
    "\uffef\107\uffef\001\002\000\056\002\uffe4\003\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4\023\uffe4\024" +
    "\uffe4\040\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4" +
    "\101\uffe4\102\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\041\073\047" +
    "\066\071\076\001\002\000\042\042\u0128\046\111\047\103" +
    "\051\106\052\115\053\104\054\107\055\114\061\116\062" +
    "\110\063\113\064\112\065\105\066\102\067\101\070\117" +
    "\001\002\000\004\017\uffec\001\002\000\004\016\u012a\001" +
    "\002\000\016\074\014\075\011\076\005\077\043\100\024" +
    "\101\037\001\002\000\010\017\uffdd\043\u012d\056\u012c\001" +
    "\002\000\034\004\077\005\062\006\070\007\063\010\067" +
    "\011\075\021\065\025\074\026\064\027\061\041\073\047" +
    "\066\071\076\001\002\000\004\044\u012e\001\002\000\006" +
    "\043\u0130\056\u012f\001\002\000\004\043\u0136\001\002\000" +
    "\004\044\u0131\001\002\000\004\056\u0132\001\002\000\004" +
    "\043\u0133\001\002\000\004\043\267\001\002\000\006\044" +
    "\u0135\045\271\001\002\000\004\017\uffdb\001\002\000\034" +
    "\004\077\005\062\006\070\007\063\010\067\011\075\021" +
    "\065\025\074\026\064\027\061\041\073\047\066\071\076" +
    "\001\002\000\006\044\u0138\045\276\001\002\000\004\017" +
    "\uffdc\001\002\000\042\017\uffde\046\111\047\103\051\106" +
    "\052\115\053\104\054\107\055\114\061\116\062\110\063" +
    "\113\064\112\065\105\066\102\067\101\070\117\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0137\000\050\002\021\003\007\012\030\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\054\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\u0104\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\322\034\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\053\012" +
    "\030\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\044\012\054" +
    "\013\025\014\043\015\044\016\034\017\024\021\031\022" +
    "\006\023\017\024\047\026\022\027\051\030\011\032\014" +
    "\033\037\034\015\035\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\071\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\202" +
    "\034\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\176\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\077\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\135\034\070\001\001\000\006\031\134\034" +
    "\070\001\001\000\006\031\133\034\070\001\001\000\006" +
    "\031\132\034\070\001\001\000\006\031\131\034\070\001" +
    "\001\000\006\031\130\034\070\001\001\000\006\031\127" +
    "\034\070\001\001\000\006\031\126\034\070\001\001\000" +
    "\006\031\125\034\070\001\001\000\006\031\124\034\070" +
    "\001\001\000\006\031\123\034\070\001\001\000\006\031" +
    "\122\034\070\001\001\000\006\031\121\034\070\001\001" +
    "\000\006\031\120\034\070\001\001\000\006\031\117\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\166\034\070\001\001\000\004\007\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\147\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\152\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\163\034\070\001\001\000\002\001\001" +
    "\000\006\031\165\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\171\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\174\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\204\034\070" +
    "\001\001\000\002\001\001\000\004\035\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\211\034\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\214\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\223\010\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\231\001\001\000\002\001\001\000" +
    "\046\003\227\012\030\013\025\014\043\015\044\016\034" +
    "\017\024\021\031\022\006\023\017\024\047\026\022\027" +
    "\051\030\011\032\014\033\037\034\015\035\046\001\001" +
    "\000\044\012\054\013\025\014\043\015\044\016\034\017" +
    "\024\021\031\022\006\023\017\024\047\026\022\027\051" +
    "\030\011\032\014\033\037\034\015\035\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\233\012\030" +
    "\013\025\014\043\015\044\016\034\017\024\021\031\022" +
    "\006\023\017\024\047\026\022\027\051\030\011\032\014" +
    "\033\037\034\015\035\046\001\001\000\044\012\054\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\002\001\001\000\004" +
    "\035\236\001\001\000\002\001\001\000\006\031\240\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\305\034\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\267\001\001\000\010\004" +
    "\300\031\273\034\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\274\031\273\034" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\277\034\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\303" +
    "\031\273\034\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\312\034\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\315" +
    "\012\030\013\025\014\043\015\044\016\034\017\024\021" +
    "\031\022\006\023\017\024\047\026\022\027\051\030\011" +
    "\032\014\033\037\034\015\035\046\001\001\000\044\012" +
    "\054\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\365\034\070\001\001\000\006\031" +
    "\354\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\337\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\344\034\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\347\034\070\001\001\000" +
    "\002\001\001\000\006\031\351\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\364\034\070\001\001" +
    "\000\006\031\360\034\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\363\034\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\370\034\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\373\012\030\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\044\012\054\013\025\014\043" +
    "\015\044\016\034\017\024\021\031\022\006\023\017\024" +
    "\047\026\022\027\051\030\011\032\014\033\037\034\015" +
    "\035\046\001\001\000\002\001\001\000\004\016\377\001" +
    "\001\000\046\003\u0100\012\030\013\025\014\043\015\044" +
    "\016\034\017\024\021\031\022\006\023\017\024\047\026" +
    "\022\027\051\030\011\032\014\033\037\034\015\035\046" +
    "\001\001\000\002\001\001\000\044\012\054\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\u0106\025" +
    "\u0107\031\u0108\034\070\001\001\000\010\025\u010d\031\u0108" +
    "\034\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\u010b\012\030\013\025\014\043" +
    "\015\044\016\034\017\024\021\031\022\006\023\017\024" +
    "\047\026\022\027\051\030\011\032\014\033\037\034\015" +
    "\035\046\001\001\000\044\012\054\013\025\014\043\015" +
    "\044\016\034\017\024\021\031\022\006\023\017\024\047" +
    "\026\022\027\051\030\011\032\014\033\037\034\015\035" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\u0111\012\030\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\044\012\054\013\025" +
    "\014\043\015\044\016\034\017\024\021\031\022\006\023" +
    "\017\024\047\026\022\027\051\030\011\032\014\033\037" +
    "\034\015\035\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u0118\034\070\001\001\000\002\001" +
    "\001\000\012\015\u011e\020\u011a\022\u011c\023\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\u0121\012\030\013\025\014\043\015\044\016\034\017" +
    "\024\021\031\022\006\023\017\024\047\026\022\027\051" +
    "\030\011\032\014\033\037\034\015\035\046\001\001\000" +
    "\044\012\054\013\025\014\043\015\044\016\034\017\024" +
    "\021\031\022\006\023\017\024\047\026\022\027\051\030" +
    "\011\032\014\033\037\034\015\035\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u0126\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u012a\001\001\000\002\001" +
    "\001\000\006\031\u0138\034\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\u0136\031" +
    "\273\034\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> erroresSintacticos = new LinkedList<>();

    //Errores recuperables
    public void syntax_error(Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
        }

    //Errores no recuperables
    public void unrecovered_syntax_error (Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO NO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> start_val = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instrucciones>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= impresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Correr 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= SentMetodo 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentFor 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentWhile 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentMatch 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentReturn 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentBreak 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sentContinue 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= Llamada FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error FINCADENA 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error RKEY 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // impresion ::= IMPRIMIR PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Correr ::= RUN ID PAR1 paramLlamada PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Run(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Correr ::= RUN ID PAR1 PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Run(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Llamada ::= ID PAR1 paramLlamada PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Llamada(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Llamada ::= ID PAR1 PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Llamada(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentReturn ::= RETURN FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentReturn ::= RETURN expresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentBreak ::= BREAK FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentBreak",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentContinue ::= CONTINUE FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentContinue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= LET ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= LET ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= LET ID COLOM LIST MENOR tipos MAYOR 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionListas(a, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= LET ID COLOM tipos LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVUD(a, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= LET ID COLOM tipos LBRACKET RBRACKET LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVBD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instrucciones>> c = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVBD(a, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= CONST ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= CONST ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= CONST ID COLOM tipos LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVUD(a, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion ::= CONST ID COLOM tipos LBRACKET RBRACKET LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVBD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instrucciones>> c = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVBD(a, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= ID IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= ID DOT APPEND PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Append(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= ID DOT REVERSE PAR1 PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Reverse(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion ::= ID DOT REMOVE PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Remove(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= ID LBRACKET expresion RBRACKET IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVUD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= ID DOT SET PAR1 expresion COMA expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignacionVUD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= ID LBRACKET expresion RBRACKET LBRACKET expresion RBRACKET IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones d = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVBD(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lista_valoresVUD ::= lista_valoresVUD COMA expresion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_valoresVUD ::= expresion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista_valoresVBD ::= lista_valoresVBD COMA LBRACKET lista_valoresVUD RBRACKET 
            {
              LinkedList<LinkedList<Instrucciones>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instrucciones>> a = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_valoresVBD ::= LBRACKET lista_valoresVUD RBRACKET 
            {
              LinkedList<LinkedList<Instrucciones>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SentMetodo ::= tipos ID PAR1 PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SentMetodo ::= tipos ID PAR1 params PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, c, d, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // params ::= params COMA parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
                                        RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // params ::= parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); 
                                        RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= ID COLOM tipos IGUAL expresion 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                                                    hm.put("tipo", a);
                                                    hm.put("id", b);
                                                    hm.put("expresion", c);
                                                    RESULT = hm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametro ::= ID COLOM tipos 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                    hm2.put("tipo", a);
                                                    hm2.put("id", b);
                                                    RESULT = hm2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramLlamada ::= paramLlamada COMA ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm = new HashMap<String, Object>();
                                                            hm.put("id", b);
                                                            hm.put("expresion", c);
                                                            RESULT = a; 
                                                            RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramLlamada ::= ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm2 = new HashMap<String, Object>();
                                                            hm2.put("id", a);
                                                            hm2.put("expresion", b);
                                                            RESULT = new LinkedList<HashMap>();
                                                            RESULT.add(hm2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseIf(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentFor ::= FOR PAR1 asignacion FINCADENA expresion FINCADENA actFor PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // actFor ::= asignacion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // actFor ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // actFor ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentWhile ::= WHILE PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentWhile ::= DO LKEY instrucciones RKEY WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentMatch ::= MATCH expresion LKEY listaCasos DEFAULT TO LKEY instrucciones RKEY RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentMatch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaCasos ::= caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Caso>(); RESULT.add((Caso)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaCasos ::= listaCasos caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; a.add((Caso)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // caso ::= expresion TO LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // insIncremento ::= ID INCREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // insIncremento ::= ID INCREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // insDecremento ::= ID DECREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // insDecremento ::= ID DECREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGATIVO, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion MAS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion POR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion DIVISION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion POTENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion RAIZ expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RAIZ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MODULO expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion IGUALACION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion DIFERENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion MAYOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion MENOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion MENORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion AND expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion OR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= NOT expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= CAST PAR1 expresion AS tipos PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casteos(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= ROUND PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= LENGTH PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Length(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= TOSTRING PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= ENTERO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= DECIMAL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= CARACTER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= CADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= BOOLEANO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= ID 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= ID DOT GET PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Get(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= ID DOT REMOVE PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Remove(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= ID DOT POP PAR1 PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Pop(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= ID LBRACKET expresion RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVUD(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= ID LBRACKET expresion RBRACKET LBRACKET expresion RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVBD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= Llamada 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipos ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipos ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipos ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
