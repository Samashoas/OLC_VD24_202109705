
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instrucciones;
import simbolo.*;
import excepciones.Errores;
import instrucciones.Run;
import instrucciones.Llamada;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVUD;
import instrucciones.DeclaracionVBD;
import instrucciones.AsignacionVar;
import instrucciones.AsignacionVUD;
import instrucciones.AsignacionVBD;
import instrucciones.Metodo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.IfElseIf;
import instrucciones.IfElse;
import instrucciones.If;
import instrucciones.Caso;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Return;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.Casteos;
import expresiones.Round;
import expresiones.AccesoVar;
import expresiones.AccesoVUD;
import expresiones.AccesoVBD;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\013\006\000" +
    "\002\033\010\000\002\033\007\000\002\034\006\000\002" +
    "\034\005\000\002\030\004\000\002\030\005\000\002\026" +
    "\004\000\002\027\004\000\002\014\010\000\002\014\006" +
    "\000\002\014\014\000\002\014\016\000\002\014\010\000" +
    "\002\014\006\000\002\014\014\000\002\014\016\000\002" +
    "\015\005\000\002\015\010\000\002\015\013\000\002\004" +
    "\005\000\002\004\003\000\002\005\007\000\002\005\005" +
    "\000\002\032\011\000\002\032\012\000\002\006\005\000" +
    "\002\006\003\000\002\010\007\000\002\010\005\000\002" +
    "\007\007\000\002\007\005\000\002\016\011\000\002\016" +
    "\015\000\002\016\013\000\002\017\015\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\011\000" +
    "\002\021\013\000\002\024\014\000\002\011\003\000\002" +
    "\011\004\000\002\025\007\000\002\022\005\000\002\022" +
    "\004\000\002\023\005\000\002\023\004\000\002\031\004" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\004\000" +
    "\002\031\010\000\002\031\006\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\031\003\000\002\031\006" +
    "\000\002\031\011\000\002\031\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\052\003\034\011\030\012\036\013\013\014" +
    "\033\015\046\020\006\023\042\024\004\062\014\063\011" +
    "\064\005\065\043\066\024\067\037\070\027\072\017\073" +
    "\041\074\051\075\021\001\002\000\004\011\377\001\002" +
    "\000\016\011\uff9c\017\uff9c\031\uff9c\032\uff9c\034\uff9c\045" +
    "\uff9c\001\002\000\004\030\374\001\002\000\056\002\ufff9" +
    "\003\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\020" +
    "\ufff9\023\ufff9\024\ufff9\027\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\066\ufff9\067\ufff9\070\ufff9\072\ufff9\073\ufff9\074" +
    "\ufff9\075\ufff9\001\002\000\054\002\000\003\034\011\030" +
    "\012\036\013\013\014\033\015\046\020\006\023\042\024" +
    "\004\062\014\063\011\064\005\065\043\066\024\067\037" +
    "\070\027\072\017\073\041\074\051\075\021\001\002\000" +
    "\016\011\uff9d\017\uff9d\031\uff9d\032\uff9d\034\uff9d\045\uff9d" +
    "\001\002\000\056\002\ufff2\003\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\020\ufff2\023\ufff2\024\ufff2\027\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\001\002\000\004" +
    "\017\373\001\002\000\016\011\uff9e\017\uff9e\031\uff9e\032" +
    "\uff9e\034\uff9e\045\uff9e\001\002\000\056\002\ufff7\003\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\023" +
    "\ufff7\024\ufff7\027\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\001\002\000\004\017\372\001\002\000\004\030\353" +
    "\001\002\000\056\002\ufff8\003\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\020\ufff8\023\ufff8\024\ufff8\027\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\001\002\000\030" +
    "\004\075\005\061\006\066\007\062\010\065\011\073\021" +
    "\063\025\072\030\070\036\064\057\074\001\002\000\004" +
    "\002\332\001\002\000\056\002\ufff1\003\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\023\ufff1\024\ufff1" +
    "\027\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\001\002" +
    "\000\016\011\uff9a\017\uff9a\031\uff9a\032\uff9a\034\uff9a\045" +
    "\uff9a\001\002\000\056\002\ufff5\003\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\020\ufff5\023\ufff5\024\ufff5\027" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\001\002\000" +
    "\004\017\331\001\002\000\004\030\316\001\002\000\014" +
    "\030\136\032\300\045\277\060\301\061\276\001\002\000" +
    "\056\002\ufffe\003\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\020\ufffe\023\ufffe\024\ufffe\027\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\072\ufffe" +
    "\073\ufffe\074\ufffe\075\ufffe\001\002\000\056\002\ufff4\003" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4" +
    "\023\ufff4\024\ufff4\027\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\001\002\000\032\004\075\005\061\006\066\007" +
    "\062\010\065\011\073\017\274\021\063\025\072\030\070" +
    "\036\064\057\074\001\002\000\006\017\271\027\272\001" +
    "\002\000\056\002\ufff6\003\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\020\ufff6\023\ufff6\024\ufff6\027\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\001\002\000\004\017" +
    "\270\001\002\000\016\011\uff99\017\uff99\031\uff99\032\uff99" +
    "\034\uff99\045\uff99\001\002\000\056\002\ufffc\003\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc\023\ufffc" +
    "\024\ufffc\027\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc" +
    "\001\002\000\004\030\262\001\002\000\004\011\227\001" +
    "\002\000\016\011\uff9b\017\uff9b\031\uff9b\032\uff9b\034\uff9b" +
    "\045\uff9b\001\002\000\004\017\226\001\002\000\004\017" +
    "\225\001\002\000\004\011\216\001\002\000\004\011\173" +
    "\001\002\000\056\002\ufff3\003\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\020\ufff3\023\ufff3\024\ufff3\027\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\001\002\000\004" +
    "\026\053\001\002\000\056\002\ufff0\003\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\020\ufff0\023\ufff0\024\ufff0" +
    "\027\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\001\002" +
    "\000\052\003\034\011\030\012\036\013\013\014\033\015" +
    "\046\020\006\023\042\024\004\062\014\063\011\064\005" +
    "\065\043\066\024\067\037\070\027\072\017\073\041\074" +
    "\051\075\021\001\002\000\054\003\034\011\030\012\036" +
    "\013\013\014\033\015\046\020\006\023\042\024\004\027" +
    "\056\062\014\063\011\064\005\065\043\066\024\067\037" +
    "\070\027\072\017\073\041\074\051\075\021\001\002\000" +
    "\056\002\uffff\003\uffff\011\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\020\uffff\023\uffff\024\uffff\027\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\072\uffff" +
    "\073\uffff\074\uffff\075\uffff\001\002\000\004\073\057\001" +
    "\002\000\004\030\060\001\002\000\030\004\075\005\061" +
    "\006\066\007\062\010\065\011\073\021\063\025\072\030" +
    "\070\036\064\057\074\001\002\000\056\017\uffa5\022\uffa5" +
    "\026\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\056\017\uffa7\022\uffa7\026\uffa7\031\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002\000" +
    "\004\030\166\001\002\000\030\004\075\005\061\006\066" +
    "\007\062\010\065\011\073\021\063\025\072\030\070\036" +
    "\064\057\074\001\002\000\056\017\uffa4\022\uffa4\026\uffa4" +
    "\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\001" +
    "\002\000\056\017\uffa8\022\uffa8\026\uffa8\031\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\056\017" +
    "\uff9f\022\uff9f\026\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\001\002\000\030\004\075\005\061\006" +
    "\066\007\062\010\065\011\073\021\063\025\072\030\070" +
    "\036\064\057\074\001\002\000\042\031\161\035\110\036" +
    "\101\040\104\041\113\042\102\043\105\044\112\047\114" +
    "\050\106\051\111\052\107\053\103\054\100\055\077\056" +
    "\115\001\002\000\004\030\156\001\002\000\062\017\uffa2" +
    "\022\uffa2\026\uffa2\030\136\031\uffa2\032\135\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000\030\004\075" +
    "\005\061\006\066\007\062\010\065\011\073\021\063\025" +
    "\072\030\070\036\064\057\074\001\002\000\056\017\uffa6" +
    "\022\uffa6\026\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\001\002\000\056\017\uffab\022\uffab\026\uffab" +
    "\031\uffab\033\uffab\034\uffab\035\110\036\101\040\104\041" +
    "\113\042\102\043\105\044\112\046\uffab\047\114\050\106" +
    "\051\111\052\107\053\103\054\100\055\uffab\056\uffab\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\056\017\uffac\022\uffac\026\uffac\031\uffac\033\uffac" +
    "\034\uffac\035\110\036\101\040\104\041\113\042\102\043" +
    "\105\044\112\046\uffac\047\114\050\106\051\111\052\107" +
    "\053\103\054\100\055\077\056\uffac\001\002\000\056\017" +
    "\uffb3\022\uffb3\026\uffb3\031\uffb3\033\uffb3\034\uffb3\035\110" +
    "\036\101\040\104\041\113\042\102\043\105\044\112\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\001\002\000\056\017\uffb7\022\uffb7\026" +
    "\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7" +
    "\041\uffb7\042\102\043\105\044\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\001\002\000\056\017\uffb4\022\uffb4\026\uffb4\031\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\042\102" +
    "\043\105\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\001\002\000\056" +
    "\017\uffb1\022\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1\035" +
    "\110\036\101\040\104\041\113\042\102\043\105\044\112" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\001\002\000\056\017\uffba\022\uffba" +
    "\026\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\040" +
    "\104\041\113\042\102\043\105\044\112\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\001\002\000\056\017\uffb0\022\uffb0\026\uffb0\031\uffb0" +
    "\033\uffb0\034\uffb0\035\110\036\101\040\104\041\113\042" +
    "\102\043\105\044\112\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000" +
    "\056\017\uffb2\022\uffb2\026\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\035\110\036\101\040\104\041\113\042\102\043\105\044" +
    "\112\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\056\uffb2\001\002\000\052\017\uffb5\022" +
    "\uffb5\026\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\040\uffb5\041\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\001\002" +
    "\000\056\017\uffb8\022\uffb8\026\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\042\102\043\105" +
    "\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\056\017\uffaf" +
    "\022\uffaf\026\uffaf\031\uffaf\033\uffaf\034\uffaf\035\110\036" +
    "\101\040\104\041\113\042\102\043\105\044\112\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\001\002\000\052\017\uffb6\022\uffb6\026\uffb6" +
    "\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\041" +
    "\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\001\002\000\056\017" +
    "\uffb9\022\uffb9\026\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\040\104\041\113\042\102\043\105\044\112\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\001\002\000\056\017\uffae\022\uffae\026" +
    "\uffae\031\uffae\033\uffae\034\uffae\035\110\036\101\040\104" +
    "\041\113\042\102\043\105\044\112\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\001\002\000\056\017\uffad\022\uffad\026\uffad\031\uffad\033" +
    "\uffad\034\uffad\035\110\036\101\040\104\041\113\042\102" +
    "\043\105\044\112\046\uffad\047\114\050\106\051\111\052" +
    "\107\053\103\054\100\055\uffad\056\uffad\001\002\000\030" +
    "\004\075\005\061\006\066\007\062\010\065\011\073\021" +
    "\063\025\072\030\070\036\064\057\074\001\002\000\006" +
    "\011\140\031\141\001\002\000\006\031\145\034\144\001" +
    "\002\000\004\045\142\001\002\000\056\017\uffe8\022\uffe8" +
    "\026\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\001\002\000\030\004\075\005\061\006\066\007\062" +
    "\010\065\011\073\021\063\025\072\030\070\036\064\057" +
    "\074\001\002\000\044\031\uffcd\034\uffcd\035\110\036\101" +
    "\040\104\041\113\042\102\043\105\044\112\047\114\050" +
    "\106\051\111\052\107\053\103\054\100\055\077\056\115" +
    "\001\002\000\004\011\146\001\002\000\056\017\uffe9\022" +
    "\uffe9\026\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\004\045\147\001\002\000\030\004" +
    "\075\005\061\006\066\007\062\010\065\011\073\021\063" +
    "\025\072\030\070\036\064\057\074\001\002\000\044\031" +
    "\uffce\034\uffce\035\110\036\101\040\104\041\113\042\102" +
    "\043\105\044\112\047\114\050\106\051\111\052\107\053" +
    "\103\054\100\055\077\056\115\001\002\000\042\033\152" +
    "\035\110\036\101\040\104\041\113\042\102\043\105\044" +
    "\112\047\114\050\106\051\111\052\107\053\103\054\100" +
    "\055\077\056\115\001\002\000\060\017\uffa1\022\uffa1\026" +
    "\uffa1\031\uffa1\032\153\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\030\004\075\005\061\006\066\007" +
    "\062\010\065\011\073\021\063\025\072\030\070\036\064" +
    "\057\074\001\002\000\042\033\155\035\110\036\101\040" +
    "\104\041\113\042\102\043\105\044\112\047\114\050\106" +
    "\051\111\052\107\053\103\054\100\055\077\056\115\001" +
    "\002\000\056\017\uffa0\022\uffa0\026\uffa0\031\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002\000\030\004" +
    "\075\005\061\006\066\007\062\010\065\011\073\021\063" +
    "\025\072\030\070\036\064\057\074\001\002\000\042\031" +
    "\160\035\110\036\101\040\104\041\113\042\102\043\105" +
    "\044\112\047\114\050\106\051\111\052\107\053\103\054" +
    "\100\055\077\056\115\001\002\000\056\017\uffa9\022\uffa9" +
    "\026\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\001\002\000\004\017\162\001\002\000\056\002\uffc4" +
    "\003\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\020" +
    "\uffc4\023\uffc4\024\uffc4\027\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\072\uffc4\073\uffc4\074" +
    "\uffc4\075\uffc4\001\002\000\042\031\164\035\110\036\101" +
    "\040\104\041\113\042\102\043\105\044\112\047\114\050" +
    "\106\051\111\052\107\053\103\054\100\055\077\056\115" +
    "\001\002\000\056\017\uffa3\022\uffa3\026\uffa3\031\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\001\002\000\056" +
    "\017\uffbb\022\uffbb\026\uffbb\031\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\001\002\000\030\004\075\005\061" +
    "\006\066\007\062\010\065\011\073\021\063\025\072\030" +
    "\070\036\064\057\074\001\002\000\042\022\170\035\110" +
    "\036\101\040\104\041\113\042\102\043\105\044\112\047" +
    "\114\050\106\051\111\052\107\053\103\054\100\055\077" +
    "\056\115\001\002\000\016\062\014\063\011\064\005\065" +
    "\043\066\024\067\037\001\002\000\004\031\172\001\002" +
    "\000\056\017\uffaa\022\uffaa\026\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000\004\030\174" +
    "\001\002\000\006\011\175\031\200\001\002\000\004\016" +
    "\212\001\002\000\006\031\uffd1\034\uffd1\001\002\000\006" +
    "\031\205\034\204\001\002\000\004\026\201\001\002\000" +
    "\052\003\034\011\030\012\036\013\013\014\033\015\046" +
    "\020\006\023\042\024\004\062\014\063\011\064\005\065" +
    "\043\066\024\067\037\070\027\072\017\073\041\074\051" +
    "\075\021\001\002\000\054\003\034\011\030\012\036\013" +
    "\013\014\033\015\046\020\006\023\042\024\004\027\203" +
    "\062\014\063\011\064\005\065\043\066\024\067\037\070" +
    "\027\072\017\073\041\074\051\075\021\001\002\000\056" +
    "\002\uffd4\003\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\020\uffd4\023\uffd4\024\uffd4\027\uffd4\062\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\001\002\000\004\011\175\001\002" +
    "\000\004\026\206\001\002\000\052\003\034\011\030\012" +
    "\036\013\013\014\033\015\046\020\006\023\042\024\004" +
    "\062\014\063\011\064\005\065\043\066\024\067\037\070" +
    "\027\072\017\073\041\074\051\075\021\001\002\000\054" +
    "\003\034\011\030\012\036\013\013\014\033\015\046\020" +
    "\006\023\042\024\004\027\210\062\014\063\011\064\005" +
    "\065\043\066\024\067\037\070\027\072\017\073\041\074" +
    "\051\075\021\001\002\000\056\002\uffd3\003\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\020\uffd3\023\uffd3\024" +
    "\uffd3\027\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\070\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\001" +
    "\002\000\006\031\uffd2\034\uffd2\001\002\000\016\062\014" +
    "\063\011\064\005\065\043\066\024\067\037\001\002\000" +
    "\010\031\uffcf\034\uffcf\045\214\001\002\000\030\004\075" +
    "\005\061\006\066\007\062\010\065\011\073\021\063\025" +
    "\072\030\070\036\064\057\074\001\002\000\044\031\uffd0" +
    "\034\uffd0\035\110\036\101\040\104\041\113\042\102\043" +
    "\105\044\112\047\114\050\106\051\111\052\107\053\103" +
    "\054\100\055\077\056\115\001\002\000\004\030\217\001" +
    "\002\000\006\011\140\031\221\001\002\000\006\031\223" +
    "\034\144\001\002\000\004\017\222\001\002\000\056\002" +
    "\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\020\uffea\023\uffea\024\uffea\027\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\001\002\000\004\017\224\001\002\000" +
    "\056\002\uffeb\003\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\020\uffeb\023\uffeb\024\uffeb\027\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\001\002\000\056\002\ufffa\003" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\020\ufffa" +
    "\023\ufffa\024\ufffa\027\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\001\002\000\056\002\ufffb\003\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\023\ufffb\024\ufffb" +
    "\027\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\001\002" +
    "\000\004\016\230\001\002\000\016\062\014\063\011\064" +
    "\005\065\043\066\024\067\037\001\002\000\010\017\uffe2" +
    "\032\233\045\232\001\002\000\030\004\075\005\061\006" +
    "\066\007\062\010\065\011\073\021\063\025\072\030\070" +
    "\036\064\057\074\001\002\000\004\033\234\001\002\000" +
    "\006\032\236\045\235\001\002\000\004\032\256\001\002" +
    "\000\004\033\237\001\002\000\004\045\240\001\002\000" +
    "\004\032\241\001\002\000\004\032\242\001\002\000\030" +
    "\004\075\005\061\006\066\007\062\010\065\011\073\021" +
    "\063\025\072\030\070\036\064\057\074\001\002\000\006" +
    "\033\245\034\244\001\002\000\004\032\246\001\002\000" +
    "\004\017\uffe0\001\002\000\030\004\075\005\061\006\066" +
    "\007\062\010\065\011\073\021\063\025\072\030\070\036" +
    "\064\057\074\001\002\000\044\033\uffd7\034\uffd7\035\110" +
    "\036\101\040\104\041\113\042\102\043\105\044\112\047" +
    "\114\050\106\051\111\052\107\053\103\054\100\055\077" +
    "\056\115\001\002\000\006\033\252\034\251\001\002\000" +
    "\030\004\075\005\061\006\066\007\062\010\065\011\073" +
    "\021\063\025\072\030\070\036\064\057\074\001\002\000" +
    "\006\033\uffd6\034\uffd6\001\002\000\044\033\uffd8\034\uffd8" +
    "\035\110\036\101\040\104\041\113\042\102\043\105\044" +
    "\112\047\114\050\106\051\111\052\107\053\103\054\100" +
    "\055\077\056\115\001\002\000\006\033\255\034\251\001" +
    "\002\000\006\033\uffd5\034\uffd5\001\002\000\030\004\075" +
    "\005\061\006\066\007\062\010\065\011\073\021\063\025" +
    "\072\030\070\036\064\057\074\001\002\000\006\033\260" +
    "\034\251\001\002\000\004\017\uffe1\001\002\000\042\017" +
    "\uffe3\035\110\036\101\040\104\041\113\042\102\043\105" +
    "\044\112\047\114\050\106\051\111\052\107\053\103\054" +
    "\100\055\077\056\115\001\002\000\030\004\075\005\061" +
    "\006\066\007\062\010\065\011\073\021\063\025\072\030" +
    "\070\036\064\057\074\001\002\000\042\031\264\035\110" +
    "\036\101\040\104\041\113\042\102\043\105\044\112\047" +
    "\114\050\106\051\111\052\107\053\103\054\100\055\077" +
    "\056\115\001\002\000\004\026\265\001\002\000\052\003" +
    "\034\011\030\012\036\013\013\014\033\015\046\020\006" +
    "\023\042\024\004\062\014\063\011\064\005\065\043\066" +
    "\024\067\037\070\027\072\017\073\041\074\051\075\021" +
    "\001\002\000\054\003\034\011\030\012\036\013\013\014" +
    "\033\015\046\020\006\023\042\024\004\027\267\062\014" +
    "\063\011\064\005\065\043\066\024\067\037\070\027\072" +
    "\017\073\041\074\051\075\021\001\002\000\056\002\uffc5" +
    "\003\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020" +
    "\uffc5\023\uffc5\024\uffc5\027\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\001\002\000\056\002\uffe5\003\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\020\uffe5\023\uffe5\024" +
    "\uffe5\027\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\001" +
    "\002\000\056\002\uffee\003\uffee\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\020\uffee\023\uffee\024\uffee\027\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\001\002\000\056\002" +
    "\uffed\003\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\020\uffed\023\uffed\024\uffed\027\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\072\uffed\073\uffed" +
    "\074\uffed\075\uffed\001\002\000\042\017\275\035\110\036" +
    "\101\040\104\041\113\042\102\043\105\044\112\047\114" +
    "\050\106\051\111\052\107\053\103\054\100\055\077\056" +
    "\115\001\002\000\056\002\uffe7\003\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\020\uffe7\023\uffe7\024\uffe7\027" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\001\002\000" +
    "\056\002\uffe6\003\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\020\uffe6\023\uffe6\024\uffe6\027\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\075\uffe6\001\002\000\062\002\uffbc\003" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\017\315" +
    "\020\uffbc\023\uffbc\024\uffbc\027\uffbc\031\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\001\002\000\030\004\075\005" +
    "\061\006\066\007\062\010\065\011\073\021\063\025\072" +
    "\030\070\036\064\057\074\001\002\000\030\004\075\005" +
    "\061\006\066\007\062\010\065\011\073\021\063\025\072" +
    "\030\070\036\064\057\074\001\002\000\062\002\uffbe\003" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\017\302" +
    "\020\uffbe\023\uffbe\024\uffbe\027\uffbe\031\uffbe\062\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\072\uffbe" +
    "\073\uffbe\074\uffbe\075\uffbe\001\002\000\060\002\uffbf\003" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\020\uffbf" +
    "\023\uffbf\024\uffbf\027\uffbf\031\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\001\002\000\042\033\304\035\110\036" +
    "\101\040\104\041\113\042\102\043\105\044\112\047\114" +
    "\050\106\051\111\052\107\053\103\054\100\055\077\056" +
    "\115\001\002\000\006\032\306\045\305\001\002\000\030" +
    "\004\075\005\061\006\066\007\062\010\065\011\073\021" +
    "\063\025\072\030\070\036\064\057\074\001\002\000\030" +
    "\004\075\005\061\006\066\007\062\010\065\011\073\021" +
    "\063\025\072\030\070\036\064\057\074\001\002\000\042" +
    "\033\310\035\110\036\101\040\104\041\113\042\102\043" +
    "\105\044\112\047\114\050\106\051\111\052\107\053\103" +
    "\054\100\055\077\056\115\001\002\000\004\045\311\001" +
    "\002\000\030\004\075\005\061\006\066\007\062\010\065" +
    "\011\073\021\063\025\072\030\070\036\064\057\074\001" +
    "\002\000\044\017\uffd9\031\uffd9\035\110\036\101\040\104" +
    "\041\113\042\102\043\105\044\112\047\114\050\106\051" +
    "\111\052\107\053\103\054\100\055\077\056\115\001\002" +
    "\000\044\017\uffda\031\uffda\035\110\036\101\040\104\041" +
    "\113\042\102\043\105\044\112\047\114\050\106\051\111" +
    "\052\107\053\103\054\100\055\077\056\115\001\002\000" +
    "\044\017\uffdb\031\uffdb\035\110\036\101\040\104\041\113" +
    "\042\102\043\105\044\112\047\114\050\106\051\111\052" +
    "\107\053\103\054\100\055\077\056\115\001\002\000\060" +
    "\002\uffbd\003\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\020\uffbd\023\uffbd\024\uffbd\027\uffbd\031\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002\000\030\004\075" +
    "\005\061\006\066\007\062\010\065\011\073\021\063\025" +
    "\072\030\070\036\064\057\074\001\002\000\042\031\320" +
    "\035\110\036\101\040\104\041\113\042\102\043\105\044" +
    "\112\047\114\050\106\051\111\052\107\053\103\054\100" +
    "\055\077\056\115\001\002\000\004\026\321\001\002\000" +
    "\052\003\034\011\030\012\036\013\013\014\033\015\046" +
    "\020\006\023\042\024\004\062\014\063\011\064\005\065" +
    "\043\066\024\067\037\070\027\072\017\073\041\074\051" +
    "\075\021\001\002\000\054\003\034\011\030\012\036\013" +
    "\013\014\033\015\046\020\006\023\042\024\004\027\323" +
    "\062\014\063\011\064\005\065\043\066\024\067\037\070" +
    "\027\072\017\073\041\074\051\075\021\001\002\000\060" +
    "\002\uffcc\003\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\020\uffcc\023\uffcc\024\uffcc\027\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071\324\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000\006\026\325" +
    "\070\027\001\002\000\052\003\034\011\030\012\036\013" +
    "\013\014\033\015\046\020\006\023\042\024\004\062\014" +
    "\063\011\064\005\065\043\066\024\067\037\070\027\072" +
    "\017\073\041\074\051\075\021\001\002\000\056\002\uffca" +
    "\003\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\020" +
    "\uffca\023\uffca\024\uffca\027\uffca\062\uffca\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\001\002\000\054\003\034\011\030\012\036" +
    "\013\013\014\033\015\046\020\006\023\042\024\004\027" +
    "\330\062\014\063\011\064\005\065\043\066\024\067\037" +
    "\070\027\072\017\073\041\074\051\075\021\001\002\000" +
    "\056\002\uffcb\003\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\020\uffcb\023\uffcb\024\uffcb\027\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\072\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\001\002\000\056\002\ufffd\003" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd" +
    "\023\ufffd\024\ufffd\027\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\070\ufffd\072\ufffd\073\ufffd\074\ufffd" +
    "\075\ufffd\001\002\000\004\002\001\001\002\000\042\026" +
    "\334\035\110\036\101\040\104\041\113\042\102\043\105" +
    "\044\112\047\114\050\106\051\111\052\107\053\103\054" +
    "\100\055\077\056\115\001\002\000\030\004\075\005\061" +
    "\006\066\007\062\010\065\011\073\021\063\025\072\030" +
    "\070\036\064\057\074\001\002\000\032\004\075\005\061" +
    "\006\066\007\062\010\065\011\073\021\063\025\072\030" +
    "\070\036\064\057\074\076\345\001\002\000\032\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\021\uffc2\025" +
    "\uffc2\030\uffc2\036\uffc2\057\uffc2\076\uffc2\001\002\000\042" +
    "\035\110\036\101\040\104\041\113\042\102\043\105\044" +
    "\112\046\340\047\114\050\106\051\111\052\107\053\103" +
    "\054\100\055\077\056\115\001\002\000\004\026\341\001" +
    "\002\000\052\003\034\011\030\012\036\013\013\014\033" +
    "\015\046\020\006\023\042\024\004\062\014\063\011\064" +
    "\005\065\043\066\024\067\037\070\027\072\017\073\041" +
    "\074\051\075\021\001\002\000\054\003\034\011\030\012" +
    "\036\013\013\014\033\015\046\020\006\023\042\024\004" +
    "\027\343\062\014\063\011\064\005\065\043\066\024\067" +
    "\037\070\027\072\017\073\041\074\051\075\021\001\002" +
    "\000\032\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\021\uffc0\025\uffc0\030\uffc0\036\uffc0\057\uffc0\076\uffc0" +
    "\001\002\000\032\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\021\uffc1\025\uffc1\030\uffc1\036\uffc1\057\uffc1" +
    "\076\uffc1\001\002\000\004\046\346\001\002\000\004\026" +
    "\347\001\002\000\052\003\034\011\030\012\036\013\013" +
    "\014\033\015\046\020\006\023\042\024\004\062\014\063" +
    "\011\064\005\065\043\066\024\067\037\070\027\072\017" +
    "\073\041\074\051\075\021\001\002\000\054\003\034\011" +
    "\030\012\036\013\013\014\033\015\046\020\006\023\042" +
    "\024\004\027\351\062\014\063\011\064\005\065\043\066" +
    "\024\067\037\070\027\072\017\073\041\074\051\075\021" +
    "\001\002\000\004\027\352\001\002\000\056\002\uffc3\003" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3" +
    "\023\uffc3\024\uffc3\027\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\001\002\000\004\011\354\001\002\000\006\032" +
    "\300\045\277\001\002\000\004\017\356\001\002\000\030" +
    "\004\075\005\061\006\066\007\062\010\065\011\073\021" +
    "\063\025\072\030\070\036\064\057\074\001\002\000\042" +
    "\017\360\035\110\036\101\040\104\041\113\042\102\043" +
    "\105\044\112\047\114\050\106\051\111\052\107\053\103" +
    "\054\100\055\077\056\115\001\002\000\004\011\362\001" +
    "\002\000\004\031\366\001\002\000\012\032\300\045\277" +
    "\060\301\061\276\001\002\000\004\031\uffc7\001\002\000" +
    "\004\031\uffc6\001\002\000\004\031\uffc8\001\002\000\004" +
    "\026\367\001\002\000\052\003\034\011\030\012\036\013" +
    "\013\014\033\015\046\020\006\023\042\024\004\062\014" +
    "\063\011\064\005\065\043\066\024\067\037\070\027\072" +
    "\017\073\041\074\051\075\021\001\002\000\054\003\034" +
    "\011\030\012\036\013\013\014\033\015\046\020\006\023" +
    "\042\024\004\027\371\062\014\063\011\064\005\065\043" +
    "\066\024\067\037\070\027\072\017\073\041\074\051\075" +
    "\021\001\002\000\056\002\uffc9\003\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\020\uffc9\023\uffc9\024\uffc9\027" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\070\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000" +
    "\056\002\uffef\003\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\015\uffef\020\uffef\023\uffef\024\uffef\027\uffef\062\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\072\uffef" +
    "\073\uffef\074\uffef\075\uffef\001\002\000\056\002\uffe4\003" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4" +
    "\023\uffe4\024\uffe4\027\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\066\uffe4\067\uffe4\070\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\001\002\000\030\004\075\005\061\006\066\007" +
    "\062\010\065\011\073\021\063\025\072\030\070\036\064" +
    "\057\074\001\002\000\042\031\376\035\110\036\101\040" +
    "\104\041\113\042\102\043\105\044\112\047\114\050\106" +
    "\051\111\052\107\053\103\054\100\055\077\056\115\001" +
    "\002\000\004\017\uffec\001\002\000\004\016\u0100\001\002" +
    "\000\016\062\014\063\011\064\005\065\043\066\024\067" +
    "\037\001\002\000\010\017\uffde\032\u0103\045\u0102\001\002" +
    "\000\030\004\075\005\061\006\066\007\062\010\065\011" +
    "\073\021\063\025\072\030\070\036\064\057\074\001\002" +
    "\000\004\033\u0104\001\002\000\006\032\u0106\045\u0105\001" +
    "\002\000\004\032\u010c\001\002\000\004\033\u0107\001\002" +
    "\000\004\045\u0108\001\002\000\004\032\u0109\001\002\000" +
    "\004\032\242\001\002\000\006\033\u010b\034\244\001\002" +
    "\000\004\017\uffdc\001\002\000\030\004\075\005\061\006" +
    "\066\007\062\010\065\011\073\021\063\025\072\030\070" +
    "\036\064\057\074\001\002\000\006\033\u010e\034\251\001" +
    "\002\000\004\017\uffdd\001\002\000\042\017\uffdf\035\110" +
    "\036\101\040\104\041\113\042\102\043\105\044\112\047" +
    "\114\050\106\051\111\052\107\053\103\054\100\055\077" +
    "\056\115\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010d\000\050\002\021\003\007\012\030\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\054\013" +
    "\025\014\043\015\044\016\034\017\024\021\031\022\006" +
    "\023\017\024\047\026\022\027\051\030\011\032\014\033" +
    "\037\034\015\035\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\332\034\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\272\034\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\053\012" +
    "\030\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\044\012\054" +
    "\013\025\014\043\015\044\016\034\017\024\021\031\022" +
    "\006\023\017\024\047\026\022\027\051\030\011\032\014" +
    "\033\037\034\015\035\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\070\034\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\164\034\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\162\034" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\075\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\133\034\066\001\001" +
    "\000\006\031\132\034\066\001\001\000\006\031\131\034" +
    "\066\001\001\000\006\031\130\034\066\001\001\000\006" +
    "\031\127\034\066\001\001\000\006\031\126\034\066\001" +
    "\001\000\006\031\125\034\066\001\001\000\006\031\124" +
    "\034\066\001\001\000\006\031\123\034\066\001\001\000" +
    "\006\031\122\034\066\001\001\000\006\031\121\034\066" +
    "\001\001\000\006\031\120\034\066\001\001\000\006\031" +
    "\117\034\066\001\001\000\006\031\116\034\066\001\001" +
    "\000\006\031\115\034\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\150\034\066\001\001\000\004" +
    "\007\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\142\034\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\147\034\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\153\034" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\156\034\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\166\034" +
    "\066\001\001\000\002\001\001\000\004\035\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\176\010\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\201\012\030\013\025\014\043\015\044\016\034\017\024" +
    "\021\031\022\006\023\017\024\047\026\022\027\051\030" +
    "\011\032\014\033\037\034\015\035\046\001\001\000\044" +
    "\012\054\013\025\014\043\015\044\016\034\017\024\021" +
    "\031\022\006\023\017\024\047\026\022\027\051\030\011" +
    "\032\014\033\037\034\015\035\046\001\001\000\002\001" +
    "\001\000\004\010\210\001\001\000\002\001\001\000\046" +
    "\003\206\012\030\013\025\014\043\015\044\016\034\017" +
    "\024\021\031\022\006\023\017\024\047\026\022\027\051" +
    "\030\011\032\014\033\037\034\015\035\046\001\001\000" +
    "\044\012\054\013\025\014\043\015\044\016\034\017\024" +
    "\021\031\022\006\023\017\024\047\026\022\027\051\030" +
    "\011\032\014\033\037\034\015\035\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\212\001\001\000" +
    "\002\001\001\000\006\031\214\034\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\230\001\001\000\002" +
    "\001\001\000\006\031\260\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\242\001" +
    "\001\000\010\004\253\031\246\034\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\247\031\246\034\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\252\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\256\031\246\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\262" +
    "\034\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\265\012\030\013\025\014\043\015\044\016\034" +
    "\017\024\021\031\022\006\023\017\024\047\026\022\027" +
    "\051\030\011\032\014\033\037\034\015\035\046\001\001" +
    "\000\044\012\054\013\025\014\043\015\044\016\034\017" +
    "\024\021\031\022\006\023\017\024\047\026\022\027\051" +
    "\030\011\032\014\033\037\034\015\035\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\313\034\066\001\001" +
    "\000\006\031\302\034\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\312\034\066\001\001\000\006\031\306\034\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\311" +
    "\034\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\316\034\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\321\012\030\013\025\014\043\015\044\016\034\017\024" +
    "\021\031\022\006\023\017\024\047\026\022\027\051\030" +
    "\011\032\014\033\037\034\015\035\046\001\001\000\044" +
    "\012\054\013\025\014\043\015\044\016\034\017\024\021" +
    "\031\022\006\023\017\024\047\026\022\027\051\030\011" +
    "\032\014\033\037\034\015\035\046\001\001\000\002\001" +
    "\001\000\004\016\325\001\001\000\046\003\326\012\030" +
    "\013\025\014\043\015\044\016\034\017\024\021\031\022" +
    "\006\023\017\024\047\026\022\027\051\030\011\032\014" +
    "\033\037\034\015\035\046\001\001\000\002\001\001\000" +
    "\044\012\054\013\025\014\043\015\044\016\034\017\024" +
    "\021\031\022\006\023\017\024\047\026\022\027\051\030" +
    "\011\032\014\033\037\034\015\035\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\334\025\335\031\336\034\066\001\001" +
    "\000\010\025\343\031\336\034\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\341" +
    "\012\030\013\025\014\043\015\044\016\034\017\024\021" +
    "\031\022\006\023\017\024\047\026\022\027\051\030\011" +
    "\032\014\033\037\034\015\035\046\001\001\000\044\012" +
    "\054\013\025\014\043\015\044\016\034\017\024\021\031" +
    "\022\006\023\017\024\047\026\022\027\051\030\011\032" +
    "\014\033\037\034\015\035\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\347\012\030\013\025\014\043\015\044\016\034" +
    "\017\024\021\031\022\006\023\017\024\047\026\022\027" +
    "\051\030\011\032\014\033\037\034\015\035\046\001\001" +
    "\000\044\012\054\013\025\014\043\015\044\016\034\017" +
    "\024\021\031\022\006\023\017\024\047\026\022\027\051" +
    "\030\011\032\014\033\037\034\015\035\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\356\034" +
    "\066\001\001\000\002\001\001\000\012\015\364\020\360" +
    "\022\362\023\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\367\012\030\013\025\014" +
    "\043\015\044\016\034\017\024\021\031\022\006\023\017" +
    "\024\047\026\022\027\051\030\011\032\014\033\037\034" +
    "\015\035\046\001\001\000\044\012\054\013\025\014\043" +
    "\015\044\016\034\017\024\021\031\022\006\023\017\024" +
    "\047\026\022\027\051\030\011\032\014\033\037\034\015" +
    "\035\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\374\034\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\u0100\001\001\000\002\001\001\000\006\031\u010e\034\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u010c\031\246\034\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> erroresSintacticos = new LinkedList<>();

    //Errores recuperables
    public void syntax_error(Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
        }

    //Errores no recuperables
    public void unrecovered_syntax_error (Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO NO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> start_val = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instrucciones>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= impresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Correr 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= SentMetodo 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentFor 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentWhile 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentMatch 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentReturn 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentBreak 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sentContinue 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= Llamada FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error FINCADENA 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error RKEY 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // impresion ::= IMPRIMIR PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Correr ::= RUN ID PAR1 paramLlamada PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Run(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Correr ::= RUN ID PAR1 PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Run(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Llamada ::= ID PAR1 paramLlamada PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Llamada(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Llamada ::= ID PAR1 PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Llamada(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentReturn ::= RETURN FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(null, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentReturn ::= RETURN expresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentBreak ::= BREAK FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentBreak",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentContinue ::= CONTINUE FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentContinue",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= LET ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= LET ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= LET ID COLOM tipos LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVUD(a, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion ::= LET ID COLOM tipos LBRACKET RBRACKET LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVBD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instrucciones>> c = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVBD(a, c, true, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion ::= CONST ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion ::= CONST ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion ::= CONST ID COLOM tipos LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVUD(a, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion ::= CONST ID COLOM tipos LBRACKET RBRACKET LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVBD RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instrucciones>> c = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVBD(a, c, false, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacion ::= ID IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= ID LBRACKET expresion RBRACKET IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVUD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= ID LBRACKET expresion RBRACKET LBRACKET expresion RBRACKET IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones d = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVBD(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_valoresVUD ::= lista_valoresVUD COMA expresion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_valoresVUD ::= expresion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_valoresVBD ::= lista_valoresVBD COMA LBRACKET lista_valoresVUD RBRACKET 
            {
              LinkedList<LinkedList<Instrucciones>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instrucciones>> a = (LinkedList<LinkedList<Instrucciones>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_valoresVBD ::= LBRACKET lista_valoresVUD RBRACKET 
            {
              LinkedList<LinkedList<Instrucciones>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_valoresVBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SentMetodo ::= tipos ID PAR1 PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SentMetodo ::= tipos ID PAR1 params PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, c, d, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // params ::= params COMA parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
                                        RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // params ::= parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); 
                                        RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= ID COLOM tipos IGUAL expresion 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                                                    hm.put("tipo", a);
                                                    hm.put("id", b);
                                                    hm.put("expresion", c);
                                                    RESULT = hm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= ID COLOM tipos 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                    hm2.put("tipo", a);
                                                    hm2.put("id", b);
                                                    RESULT = hm2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramLlamada ::= paramLlamada COMA ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm = new HashMap<String, Object>();
                                                            hm.put("id", b);
                                                            hm.put("expresion", c);
                                                            RESULT = a; 
                                                            RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramLlamada ::= ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm2 = new HashMap<String, Object>();
                                                            hm2.put("id", a);
                                                            hm2.put("expresion", b);
                                                            RESULT = new LinkedList<HashMap>();
                                                            RESULT.add(hm2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseIf(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentFor ::= FOR PAR1 asignacion FINCADENA expresion FINCADENA actFor PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // actFor ::= asignacion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // actFor ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // actFor ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentWhile ::= WHILE PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentWhile ::= DO LKEY instrucciones RKEY WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentMatch ::= MATCH expresion LKEY listaCasos DEFAULT TO LKEY instrucciones RKEY RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentMatch",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaCasos ::= caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Caso>(); RESULT.add((Caso)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaCasos ::= listaCasos caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; a.add((Caso)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // caso ::= expresion TO LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // insIncremento ::= ID INCREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insIncremento ::= ID INCREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // insDecremento ::= ID DECREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // insDecremento ::= ID DECREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGATIVO, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MAS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion POR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion DIVISION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion POTENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion RAIZ expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RAIZ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion MODULO expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion IGUALACION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion DIFERENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion MAYOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MENOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion MENORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion AND expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion OR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= NOT expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= CAST PAR1 expresion AS tipos PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casteos(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= ROUND PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= ENTERO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= DECIMAL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= CARACTER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= CADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= BOOLEANO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= ID 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= ID LBRACKET expresion RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVUD(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= ID LBRACKET expresion RBRACKET LBRACKET expresion RBRACKET 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVBD(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= Llamada 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipos ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipos ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipos ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
