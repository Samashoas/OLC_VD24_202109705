
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instrucciones;
import simbolo.*;
import excepciones.Errores;
import instrucciones.Run;
import instrucciones.Llamada;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.Metodo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.IfElseIf;
import instrucciones.IfElse;
import instrucciones.If;
import instrucciones.Caso;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.Casteos;
import expresiones.Round;
import expresiones.AccesoVar;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\010\004\000\002\010\003" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\011\006\000\002\030\010\000" +
    "\002\030\007\000\002\031\006\000\002\031\005\000\002" +
    "\024\004\000\002\025\004\000\002\012\010\000\002\012" +
    "\006\000\002\012\010\000\002\012\006\000\002\013\005" +
    "\000\002\027\011\000\002\027\012\000\002\004\005\000" +
    "\002\004\003\000\002\006\007\000\002\006\005\000\002" +
    "\005\007\000\002\005\005\000\002\014\011\000\002\014" +
    "\015\000\002\014\013\000\002\015\015\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\011\000" +
    "\002\017\013\000\002\022\014\000\002\007\003\000\002" +
    "\007\004\000\002\023\007\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\004\000\002\026\004" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\004\000" +
    "\002\026\010\000\002\026\006\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\005\000\002\026\003\000\002\026\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\050\003\032\011\027\012\034\013\012\014" +
    "\044\017\006\022\040\023\004\057\013\060\011\061\005" +
    "\062\041\063\023\064\035\065\026\067\016\070\037\071" +
    "\047\072\020\001\002\000\004\011\324\001\002\000\014" +
    "\011\uffab\016\uffab\030\uffab\031\uffab\042\uffab\001\002\000" +
    "\004\027\321\001\002\000\054\002\ufff9\003\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\017\ufff9\022\ufff9\023\ufff9\026" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\001\002\000" +
    "\052\002\000\003\032\011\027\012\034\013\012\014\044" +
    "\017\006\022\040\023\004\057\013\060\011\061\005\062" +
    "\041\063\023\064\035\065\026\067\016\070\037\071\047" +
    "\072\020\001\002\000\014\011\uffac\016\uffac\030\uffac\031" +
    "\uffac\042\uffac\001\002\000\004\016\320\001\002\000\014" +
    "\011\uffad\016\uffad\030\uffad\031\uffad\042\uffad\001\002\000" +
    "\054\002\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\017\ufff7\022\ufff7\023\ufff7\026\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\001\002\000\004\016\317\001\002\000" +
    "\004\027\300\001\002\000\054\002\ufff8\003\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\017\ufff8\022\ufff8\023\ufff8\026" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\001\002\000" +
    "\030\004\073\005\057\006\064\007\060\010\063\011\071" +
    "\020\061\024\070\027\066\033\062\054\072\001\002\000" +
    "\004\002\257\001\002\000\054\002\ufff2\003\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\017\ufff2\022\ufff2\023\ufff2\026" +
    "\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002\000" +
    "\014\011\uffa9\016\uffa9\030\uffa9\031\uffa9\042\uffa9\001\002" +
    "\000\054\002\ufff5\003\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\017\ufff5\022\ufff5\023\ufff5\026\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\001\002\000\004\016\256\001\002" +
    "\000\004\027\243\001\002\000\012\027\133\042\236\055" +
    "\237\056\235\001\002\000\054\002\ufffe\003\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\017\ufffe\022\ufffe\023\ufffe\026" +
    "\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\001\002\000" +
    "\054\002\ufff4\003\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\017\ufff4\022\ufff4\023\ufff4\026\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\001\002\000\006\016\233\026\234\001" +
    "\002\000\054\002\ufff6\003\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\017\ufff6\022\ufff6\023\ufff6\026\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6" +
    "\070\ufff6\071\ufff6\072\ufff6\001\002\000\004\016\232\001" +
    "\002\000\014\011\uffa8\016\uffa8\030\uffa8\031\uffa8\042\uffa8" +
    "\001\002\000\054\002\ufffc\003\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\017\ufffc\022\ufffc\023\ufffc\026\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\067" +
    "\ufffc\070\ufffc\071\ufffc\072\ufffc\001\002\000\004\027\224" +
    "\001\002\000\004\011\217\001\002\000\014\011\uffaa\016" +
    "\uffaa\030\uffaa\031\uffaa\042\uffaa\001\002\000\004\016\216" +
    "\001\002\000\004\016\215\001\002\000\004\011\206\001" +
    "\002\000\004\011\163\001\002\000\054\002\ufff3\003\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\017\ufff3\022\ufff3\023" +
    "\ufff3\026\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001" +
    "\002\000\004\025\051\001\002\000\054\002\ufff1\003\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\017\ufff1\022\ufff1\023" +
    "\ufff1\026\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\001" +
    "\002\000\050\003\032\011\027\012\034\013\012\014\044" +
    "\017\006\022\040\023\004\057\013\060\011\061\005\062" +
    "\041\063\023\064\035\065\026\067\016\070\037\071\047" +
    "\072\020\001\002\000\052\003\032\011\027\012\034\013" +
    "\012\014\044\017\006\022\040\023\004\026\054\057\013" +
    "\060\011\061\005\062\041\063\023\064\035\065\026\067" +
    "\016\070\037\071\047\072\020\001\002\000\054\002\uffff" +
    "\003\uffff\011\uffff\012\uffff\013\uffff\014\uffff\017\uffff\022" +
    "\uffff\023\uffff\026\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\064\uffff\065\uffff\067\uffff\070\uffff\071\uffff\072" +
    "\uffff\001\002\000\004\070\055\001\002\000\004\027\056" +
    "\001\002\000\030\004\073\005\057\006\064\007\060\010" +
    "\063\011\071\020\061\024\070\027\066\033\062\054\072" +
    "\001\002\000\054\016\uffb2\021\uffb2\025\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\001\002\000\054\016\uffb4" +
    "\021\uffb4\025\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\001\002\000\004\027\156\001\002\000\030\004\073" +
    "\005\057\006\064\007\060\010\063\011\071\020\061\024" +
    "\070\027\066\033\062\054\072\001\002\000\054\016\uffb1" +
    "\021\uffb1\025\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\001\002\000\054\016\uffb5\021\uffb5\025\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\054\016" +
    "\uffaf\021\uffaf\025\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\042\030\151\032\105\033\077\035" +
    "\102\036\111\037\100\040\104\041\110\044\112\045\103" +
    "\046\107\047\106\050\101\051\076\052\075\053\113\001" +
    "\002\000\004\027\146\001\002\000\056\016\uffae\021\uffae" +
    "\025\uffae\027\133\030\uffae\031\uffae\032\uffae\033\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\001\002\000\030\004\073\005\057\006\064\007\060" +
    "\010\063\011\071\020\061\024\070\027\066\033\062\054" +
    "\072\001\002\000\054\016\uffb3\021\uffb3\025\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\054\016" +
    "\uffb8\021\uffb8\025\uffb8\030\uffb8\031\uffb8\032\105\033\077" +
    "\035\102\036\111\037\100\040\104\041\110\043\uffb8\044" +
    "\112\045\103\046\107\047\106\050\101\051\076\052\uffb8" +
    "\053\uffb8\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\054\016\uffb9\021\uffb9\025\uffb9\030" +
    "\uffb9\031\uffb9\032\105\033\077\035\102\036\111\037\100" +
    "\040\104\041\110\043\uffb9\044\112\045\103\046\107\047" +
    "\106\050\101\051\076\052\075\053\uffb9\001\002\000\054" +
    "\016\uffc0\021\uffc0\025\uffc0\030\uffc0\031\uffc0\032\105\033" +
    "\077\035\102\036\111\037\100\040\104\041\110\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\001\002\000\054\016\uffc4\021\uffc4\025\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037" +
    "\100\040\104\041\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002\000" +
    "\054\016\uffc1\021\uffc1\025\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\035\uffc1\036\uffc1\037\100\040\104\041\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\001\002\000\054\016\uffbe\021\uffbe\025" +
    "\uffbe\030\uffbe\031\uffbe\032\105\033\077\035\102\036\111" +
    "\037\100\040\104\041\110\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002" +
    "\000\054\016\uffbd\021\uffbd\025\uffbd\030\uffbd\031\uffbd\032" +
    "\105\033\077\035\102\036\111\037\100\040\104\041\110" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\053\uffbd\001\002\000\054\016\uffc7\021\uffc7" +
    "\025\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\035\102\036" +
    "\111\037\100\040\104\041\110\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\050\016\uffc2\021\uffc2\025\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\035\uffc2\036\uffc2\041\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\001\002\000\054\016\uffbf\021\uffbf\025\uffbf\030" +
    "\uffbf\031\uffbf\032\105\033\077\035\102\036\111\037\100" +
    "\040\104\041\110\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\054" +
    "\016\uffc5\021\uffc5\025\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\035\uffc5\036\uffc5\037\100\040\104\041\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\001\002\000\054\016\uffbc\021\uffbc\025\uffbc" +
    "\030\uffbc\031\uffbc\032\105\033\077\035\102\036\111\037" +
    "\100\040\104\041\110\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000" +
    "\050\016\uffc3\021\uffc3\025\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\035\uffc3\036\uffc3\041\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\001\002\000\054\016\uffc6\021\uffc6\025\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\035\102\036\111\037\100\040\104" +
    "\041\110\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\054\016\uffbb" +
    "\021\uffbb\025\uffbb\030\uffbb\031\uffbb\032\105\033\077\035" +
    "\102\036\111\037\100\040\104\041\110\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\001\002\000\054\016\uffba\021\uffba\025\uffba\030\uffba" +
    "\031\uffba\032\105\033\077\035\102\036\111\037\100\040" +
    "\104\041\110\043\uffba\044\112\045\103\046\107\047\106" +
    "\050\101\051\076\052\uffba\053\uffba\001\002\000\006\011" +
    "\134\030\136\001\002\000\004\042\144\001\002\000\006" +
    "\030\140\031\137\001\002\000\054\016\uffe9\021\uffe9\025" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002" +
    "\000\004\011\141\001\002\000\054\016\uffea\021\uffea\025" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\001\002" +
    "\000\004\042\142\001\002\000\030\004\073\005\057\006" +
    "\064\007\060\010\063\011\071\020\061\024\070\027\066" +
    "\033\062\054\072\001\002\000\044\030\uffdb\031\uffdb\032" +
    "\105\033\077\035\102\036\111\037\100\040\104\041\110" +
    "\044\112\045\103\046\107\047\106\050\101\051\076\052" +
    "\075\053\113\001\002\000\030\004\073\005\057\006\064" +
    "\007\060\010\063\011\071\020\061\024\070\027\066\033" +
    "\062\054\072\001\002\000\044\030\uffda\031\uffda\032\105" +
    "\033\077\035\102\036\111\037\100\040\104\041\110\044" +
    "\112\045\103\046\107\047\106\050\101\051\076\052\075" +
    "\053\113\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\042\030\150\032\105\033\077\035" +
    "\102\036\111\037\100\040\104\041\110\044\112\045\103" +
    "\046\107\047\106\050\101\051\076\052\075\053\113\001" +
    "\002\000\054\016\uffb6\021\uffb6\025\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\001\002\000\004\016\152\001" +
    "\002\000\054\002\uffd1\003\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\017\uffd1\022\uffd1\023\uffd1\026\uffd1\057\uffd1\060" +
    "\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\001\002\000\042\030\154\032" +
    "\105\033\077\035\102\036\111\037\100\040\104\041\110" +
    "\044\112\045\103\046\107\047\106\050\101\051\076\052" +
    "\075\053\113\001\002\000\054\016\uffb0\021\uffb0\025\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002\000" +
    "\054\016\uffc8\021\uffc8\025\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\001\002\000\030\004\073\005\057\006" +
    "\064\007\060\010\063\011\071\020\061\024\070\027\066" +
    "\033\062\054\072\001\002\000\042\021\160\032\105\033" +
    "\077\035\102\036\111\037\100\040\104\041\110\044\112" +
    "\045\103\046\107\047\106\050\101\051\076\052\075\053" +
    "\113\001\002\000\016\057\013\060\011\061\005\062\041" +
    "\063\023\064\035\001\002\000\004\030\162\001\002\000" +
    "\054\016\uffb7\021\uffb7\025\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\004\027\164\001\002\000" +
    "\006\011\165\030\170\001\002\000\004\015\202\001\002" +
    "\000\006\030\uffde\031\uffde\001\002\000\006\030\175\031" +
    "\174\001\002\000\004\025\171\001\002\000\050\003\032" +
    "\011\027\012\034\013\012\014\044\017\006\022\040\023" +
    "\004\057\013\060\011\061\005\062\041\063\023\064\035" +
    "\065\026\067\016\070\037\071\047\072\020\001\002\000" +
    "\052\003\032\011\027\012\034\013\012\014\044\017\006" +
    "\022\040\023\004\026\173\057\013\060\011\061\005\062" +
    "\041\063\023\064\035\065\026\067\016\070\037\071\047" +
    "\072\020\001\002\000\054\002\uffe1\003\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\017\uffe1\022\uffe1\023\uffe1\026\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\001\002\000\004" +
    "\011\165\001\002\000\004\025\176\001\002\000\050\003" +
    "\032\011\027\012\034\013\012\014\044\017\006\022\040" +
    "\023\004\057\013\060\011\061\005\062\041\063\023\064" +
    "\035\065\026\067\016\070\037\071\047\072\020\001\002" +
    "\000\052\003\032\011\027\012\034\013\012\014\044\017" +
    "\006\022\040\023\004\026\200\057\013\060\011\061\005" +
    "\062\041\063\023\064\035\065\026\067\016\070\037\071" +
    "\047\072\020\001\002\000\054\002\uffe0\003\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\017\uffe0\022\uffe0\023\uffe0\026" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\001\002\000" +
    "\006\030\uffdf\031\uffdf\001\002\000\016\057\013\060\011" +
    "\061\005\062\041\063\023\064\035\001\002\000\010\030" +
    "\uffdc\031\uffdc\042\204\001\002\000\030\004\073\005\057" +
    "\006\064\007\060\010\063\011\071\020\061\024\070\027" +
    "\066\033\062\054\072\001\002\000\044\030\uffdd\031\uffdd" +
    "\032\105\033\077\035\102\036\111\037\100\040\104\041" +
    "\110\044\112\045\103\046\107\047\106\050\101\051\076" +
    "\052\075\053\113\001\002\000\004\027\207\001\002\000" +
    "\006\011\134\030\211\001\002\000\006\030\213\031\137" +
    "\001\002\000\004\016\212\001\002\000\054\002\uffeb\003" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\017\uffeb\022\uffeb" +
    "\023\uffeb\026\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb" +
    "\001\002\000\004\016\214\001\002\000\054\002\uffec\003" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\017\uffec\022\uffec" +
    "\023\uffec\026\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\065\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\001\002\000\054\002\ufffa\003\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\017\ufffa\022\ufffa\023\ufffa\026\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\001\002\000\054\002\ufffb" +
    "\003\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\017\ufffb\022" +
    "\ufffb\023\ufffb\026\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\072" +
    "\ufffb\001\002\000\004\015\220\001\002\000\016\057\013" +
    "\060\011\061\005\062\041\063\023\064\035\001\002\000" +
    "\006\016\uffe5\042\222\001\002\000\030\004\073\005\057" +
    "\006\064\007\060\010\063\011\071\020\061\024\070\027" +
    "\066\033\062\054\072\001\002\000\042\016\uffe6\032\105" +
    "\033\077\035\102\036\111\037\100\040\104\041\110\044" +
    "\112\045\103\046\107\047\106\050\101\051\076\052\075" +
    "\053\113\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\042\030\226\032\105\033\077\035" +
    "\102\036\111\037\100\040\104\041\110\044\112\045\103" +
    "\046\107\047\106\050\101\051\076\052\075\053\113\001" +
    "\002\000\004\025\227\001\002\000\050\003\032\011\027" +
    "\012\034\013\012\014\044\017\006\022\040\023\004\057" +
    "\013\060\011\061\005\062\041\063\023\064\035\065\026" +
    "\067\016\070\037\071\047\072\020\001\002\000\052\003" +
    "\032\011\027\012\034\013\012\014\044\017\006\022\040" +
    "\023\004\026\231\057\013\060\011\061\005\062\041\063" +
    "\023\064\035\065\026\067\016\070\037\071\047\072\020" +
    "\001\002\000\054\002\uffd2\003\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\017\uffd2\022\uffd2\023\uffd2\026\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067" +
    "\uffd2\070\uffd2\071\uffd2\072\uffd2\001\002\000\054\002\uffe8" +
    "\003\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\017\uffe8\022" +
    "\uffe8\023\uffe8\026\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\001\002\000\054\002\uffef\003\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\017\uffef\022\uffef\023\uffef\026\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\067\uffef\070\uffef\071\uffef\072\uffef\001\002\000\054\002" +
    "\uffee\003\uffee\011\uffee\012\uffee\013\uffee\014\uffee\017\uffee" +
    "\022\uffee\023\uffee\026\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\001\002\000\060\002\uffc9\003\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\016\242\017\uffc9\022\uffc9\023\uffc9" +
    "\026\uffc9\030\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\001\002\000\030\004\073\005\057\006\064\007\060\010" +
    "\063\011\071\020\061\024\070\027\066\033\062\054\072" +
    "\001\002\000\060\002\uffcb\003\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\016\240\017\uffcb\022\uffcb\023\uffcb\026\uffcb" +
    "\030\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\001\002" +
    "\000\056\002\uffcc\003\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\017\uffcc\022\uffcc\023\uffcc\026\uffcc\030\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\001\002\000\044\016\uffe2" +
    "\030\uffe2\032\105\033\077\035\102\036\111\037\100\040" +
    "\104\041\110\044\112\045\103\046\107\047\106\050\101" +
    "\051\076\052\075\053\113\001\002\000\056\002\uffca\003" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\017\uffca\022\uffca" +
    "\023\uffca\026\uffca\030\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\067\uffca\070\uffca\071\uffca" +
    "\072\uffca\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\042\030\245\032\105\033\077\035" +
    "\102\036\111\037\100\040\104\041\110\044\112\045\103" +
    "\046\107\047\106\050\101\051\076\052\075\053\113\001" +
    "\002\000\004\025\246\001\002\000\050\003\032\011\027" +
    "\012\034\013\012\014\044\017\006\022\040\023\004\057" +
    "\013\060\011\061\005\062\041\063\023\064\035\065\026" +
    "\067\016\070\037\071\047\072\020\001\002\000\052\003" +
    "\032\011\027\012\034\013\012\014\044\017\006\022\040" +
    "\023\004\026\250\057\013\060\011\061\005\062\041\063" +
    "\023\064\035\065\026\067\016\070\037\071\047\072\020" +
    "\001\002\000\056\002\uffd9\003\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\017\uffd9\022\uffd9\023\uffd9\026\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\251\067\uffd9\070\uffd9\071\uffd9\072\uffd9\001\002\000\006" +
    "\025\252\065\026\001\002\000\050\003\032\011\027\012" +
    "\034\013\012\014\044\017\006\022\040\023\004\057\013" +
    "\060\011\061\005\062\041\063\023\064\035\065\026\067" +
    "\016\070\037\071\047\072\020\001\002\000\054\002\uffd7" +
    "\003\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\017\uffd7\022" +
    "\uffd7\023\uffd7\026\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\001\002\000\052\003\032\011\027\012\034\013\012" +
    "\014\044\017\006\022\040\023\004\026\255\057\013\060" +
    "\011\061\005\062\041\063\023\064\035\065\026\067\016" +
    "\070\037\071\047\072\020\001\002\000\054\002\uffd8\003" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\017\uffd8\022\uffd8" +
    "\023\uffd8\026\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8" +
    "\001\002\000\054\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\017\ufffd\022\ufffd\023\ufffd\026\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\001\002\000\004\002\001" +
    "\001\002\000\042\025\261\032\105\033\077\035\102\036" +
    "\111\037\100\040\104\041\110\044\112\045\103\046\107" +
    "\047\106\050\101\051\076\052\075\053\113\001\002\000" +
    "\030\004\073\005\057\006\064\007\060\010\063\011\071" +
    "\020\061\024\070\027\066\033\062\054\072\001\002\000" +
    "\032\004\073\005\057\006\064\007\060\010\063\011\071" +
    "\020\061\024\070\027\066\033\062\054\072\073\272\001" +
    "\002\000\032\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\020\uffcf\024\uffcf\027\uffcf\033\uffcf\054\uffcf\073" +
    "\uffcf\001\002\000\042\032\105\033\077\035\102\036\111" +
    "\037\100\040\104\041\110\043\265\044\112\045\103\046" +
    "\107\047\106\050\101\051\076\052\075\053\113\001\002" +
    "\000\004\025\266\001\002\000\050\003\032\011\027\012" +
    "\034\013\012\014\044\017\006\022\040\023\004\057\013" +
    "\060\011\061\005\062\041\063\023\064\035\065\026\067" +
    "\016\070\037\071\047\072\020\001\002\000\052\003\032" +
    "\011\027\012\034\013\012\014\044\017\006\022\040\023" +
    "\004\026\270\057\013\060\011\061\005\062\041\063\023" +
    "\064\035\065\026\067\016\070\037\071\047\072\020\001" +
    "\002\000\032\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\020\uffcd\024\uffcd\027\uffcd\033\uffcd\054\uffcd\073" +
    "\uffcd\001\002\000\032\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\020\uffce\024\uffce\027\uffce\033\uffce\054" +
    "\uffce\073\uffce\001\002\000\004\043\273\001\002\000\004" +
    "\025\274\001\002\000\050\003\032\011\027\012\034\013" +
    "\012\014\044\017\006\022\040\023\004\057\013\060\011" +
    "\061\005\062\041\063\023\064\035\065\026\067\016\070" +
    "\037\071\047\072\020\001\002\000\052\003\032\011\027" +
    "\012\034\013\012\014\044\017\006\022\040\023\004\026" +
    "\276\057\013\060\011\061\005\062\041\063\023\064\035" +
    "\065\026\067\016\070\037\071\047\072\020\001\002\000" +
    "\004\026\277\001\002\000\054\002\uffd0\003\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\017\uffd0\022\uffd0\023\uffd0\026" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\001\002\000" +
    "\004\011\301\001\002\000\004\042\236\001\002\000\004" +
    "\016\303\001\002\000\030\004\073\005\057\006\064\007" +
    "\060\010\063\011\071\020\061\024\070\027\066\033\062" +
    "\054\072\001\002\000\042\016\305\032\105\033\077\035" +
    "\102\036\111\037\100\040\104\041\110\044\112\045\103" +
    "\046\107\047\106\050\101\051\076\052\075\053\113\001" +
    "\002\000\004\011\307\001\002\000\004\030\313\001\002" +
    "\000\010\042\236\055\237\056\235\001\002\000\004\030" +
    "\uffd4\001\002\000\004\030\uffd3\001\002\000\004\030\uffd5" +
    "\001\002\000\004\025\314\001\002\000\050\003\032\011" +
    "\027\012\034\013\012\014\044\017\006\022\040\023\004" +
    "\057\013\060\011\061\005\062\041\063\023\064\035\065" +
    "\026\067\016\070\037\071\047\072\020\001\002\000\052" +
    "\003\032\011\027\012\034\013\012\014\044\017\006\022" +
    "\040\023\004\026\316\057\013\060\011\061\005\062\041" +
    "\063\023\064\035\065\026\067\016\070\037\071\047\072" +
    "\020\001\002\000\054\002\uffd6\003\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\017\uffd6\022\uffd6\023\uffd6\026\uffd6\057" +
    "\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6" +
    "\067\uffd6\070\uffd6\071\uffd6\072\uffd6\001\002\000\054\002" +
    "\ufff0\003\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\017\ufff0" +
    "\022\ufff0\023\ufff0\026\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\001\002\000\054\002\uffe7\003\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\017\uffe7\022\uffe7\023\uffe7\026\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\001\002\000\030" +
    "\004\073\005\057\006\064\007\060\010\063\011\071\020" +
    "\061\024\070\027\066\033\062\054\072\001\002\000\042" +
    "\030\323\032\105\033\077\035\102\036\111\037\100\040" +
    "\104\041\110\044\112\045\103\046\107\047\106\050\101" +
    "\051\076\052\075\053\113\001\002\000\004\016\uffed\001" +
    "\002\000\004\015\325\001\002\000\016\057\013\060\011" +
    "\061\005\062\041\063\023\064\035\001\002\000\006\016" +
    "\uffe3\042\327\001\002\000\030\004\073\005\057\006\064" +
    "\007\060\010\063\011\071\020\061\024\070\027\066\033" +
    "\062\054\072\001\002\000\042\016\uffe4\032\105\033\077" +
    "\035\102\036\111\037\100\040\104\041\110\044\112\045" +
    "\103\046\107\047\106\050\101\051\076\052\075\053\113" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\046\002\020\003\007\010\027\011\024\012" +
    "\041\013\042\014\032\015\023\017\030\020\006\021\016" +
    "\022\045\024\021\025\047\027\013\030\035\031\014\032" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\010\052\011\024\012" +
    "\041\013\042\014\032\015\023\017\030\020\006\021\016" +
    "\022\045\024\021\025\047\027\013\030\035\031\014\032" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\257\031\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\051\010\027\011\024" +
    "\012\041\013\042\014\032\015\023\017\030\020\006\021" +
    "\016\022\045\024\021\025\047\027\013\030\035\031\014" +
    "\032\044\001\001\000\042\010\052\011\024\012\041\013" +
    "\042\014\032\015\023\017\030\020\006\021\016\022\045" +
    "\024\021\025\047\027\013\030\035\031\014\032\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\066\031\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\154\031\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\152\031\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\073\031" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\131\031\064\001\001\000\006\026\130\031\064\001" +
    "\001\000\006\026\127\031\064\001\001\000\006\026\126" +
    "\031\064\001\001\000\006\026\125\031\064\001\001\000" +
    "\006\026\124\031\064\001\001\000\006\026\123\031\064" +
    "\001\001\000\006\026\122\031\064\001\001\000\006\026" +
    "\121\031\064\001\001\000\006\026\120\031\064\001\001" +
    "\000\006\026\117\031\064\001\001\000\006\026\116\031" +
    "\064\001\001\000\006\026\115\031\064\001\001\000\006" +
    "\026\114\031\064\001\001\000\006\026\113\031\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\142\031\064\001\001\000\002\001\001\000" +
    "\006\026\144\031\064\001\001\000\002\001\001\000\006" +
    "\026\146\031\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\156\031" +
    "\064\001\001\000\002\001\001\000\004\032\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\166\006\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\171\010\027\011\024\012\041\013\042\014\032\015\023" +
    "\017\030\020\006\021\016\022\045\024\021\025\047\027" +
    "\013\030\035\031\014\032\044\001\001\000\042\010\052" +
    "\011\024\012\041\013\042\014\032\015\023\017\030\020" +
    "\006\021\016\022\045\024\021\025\047\027\013\030\035" +
    "\031\014\032\044\001\001\000\002\001\001\000\004\006" +
    "\200\001\001\000\002\001\001\000\044\003\176\010\027" +
    "\011\024\012\041\013\042\014\032\015\023\017\030\020" +
    "\006\021\016\022\045\024\021\025\047\027\013\030\035" +
    "\031\014\032\044\001\001\000\042\010\052\011\024\012" +
    "\041\013\042\014\032\015\023\017\030\020\006\021\016" +
    "\022\045\024\021\025\047\027\013\030\035\031\014\032" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\202\001\001\000\002\001\001\000\006\026\204\031" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\220\001\001\000\002\001\001\000\006\026\222\031\064" +
    "\001\001\000\002\001\001\000\006\026\224\031\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\003\227" +
    "\010\027\011\024\012\041\013\042\014\032\015\023\017" +
    "\030\020\006\021\016\022\045\024\021\025\047\027\013" +
    "\030\035\031\014\032\044\001\001\000\042\010\052\011" +
    "\024\012\041\013\042\014\032\015\023\017\030\020\006" +
    "\021\016\022\045\024\021\025\047\027\013\030\035\031" +
    "\014\032\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\240\031\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\243\031\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\246\010\027\011\024\012\041\013\042\014" +
    "\032\015\023\017\030\020\006\021\016\022\045\024\021" +
    "\025\047\027\013\030\035\031\014\032\044\001\001\000" +
    "\042\010\052\011\024\012\041\013\042\014\032\015\023" +
    "\017\030\020\006\021\016\022\045\024\021\025\047\027" +
    "\013\030\035\031\014\032\044\001\001\000\002\001\001" +
    "\000\004\014\252\001\001\000\044\003\253\010\027\011" +
    "\024\012\041\013\042\014\032\015\023\017\030\020\006" +
    "\021\016\022\045\024\021\025\047\027\013\030\035\031" +
    "\014\032\044\001\001\000\002\001\001\000\042\010\052" +
    "\011\024\012\041\013\042\014\032\015\023\017\030\020" +
    "\006\021\016\022\045\024\021\025\047\027\013\030\035" +
    "\031\014\032\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\261" +
    "\023\262\026\263\031\064\001\001\000\010\023\270\026" +
    "\263\031\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\266\010\027\011\024\012" +
    "\041\013\042\014\032\015\023\017\030\020\006\021\016" +
    "\022\045\024\021\025\047\027\013\030\035\031\014\032" +
    "\044\001\001\000\042\010\052\011\024\012\041\013\042" +
    "\014\032\015\023\017\030\020\006\021\016\022\045\024" +
    "\021\025\047\027\013\030\035\031\014\032\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\274\010\027\011\024\012\041" +
    "\013\042\014\032\015\023\017\030\020\006\021\016\022" +
    "\045\024\021\025\047\027\013\030\035\031\014\032\044" +
    "\001\001\000\042\010\052\011\024\012\041\013\042\014" +
    "\032\015\023\017\030\020\006\021\016\022\045\024\021" +
    "\025\047\027\013\030\035\031\014\032\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\303\031" +
    "\064\001\001\000\002\001\001\000\012\013\311\016\305" +
    "\020\307\021\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\314\010\027\011\024\012" +
    "\041\013\042\014\032\015\023\017\030\020\006\021\016" +
    "\022\045\024\021\025\047\027\013\030\035\031\014\032" +
    "\044\001\001\000\042\010\052\011\024\012\041\013\042" +
    "\014\032\015\023\017\030\020\006\021\016\022\045\024" +
    "\021\025\047\027\013\030\035\031\014\032\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\321\031\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\325\001\001\000" +
    "\002\001\001\000\006\026\327\031\064\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> erroresSintacticos = new LinkedList<>();

    //Errores recuperables
    public void syntax_error(Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
        }

    //Errores no recuperables
    public void unrecovered_syntax_error (Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO NO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> start_val = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Instrucciones>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= impresion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Correr 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= SentMetodo 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentFor 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentWhile 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentMatch 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentBreak 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentContinue 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= Llamada FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= error FINCADENA 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error RKEY 
            {
              Instrucciones RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // impresion ::= IMPRIMIR PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Correr ::= RUN ID PAR1 paramLlamada PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Run(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Correr ::= RUN ID PAR1 PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Run(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Correr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Llamada ::= ID PAR1 paramLlamada PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Llamada(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Llamada ::= ID PAR1 PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Llamada(a, new LinkedList<HashMap>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentBreak ::= BREAK FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentBreak",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentContinue ::= CONTINUE FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentContinue",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion ::= LET ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion ::= LET ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, true, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion ::= CONST ID COLOM tipos IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, c, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= CONST ID COLOM tipos 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, null, b, false, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacion ::= ID IGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SentMetodo ::= tipos ID PAR1 PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentMetodo ::= tipos ID PAR1 params PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Metodo(b, c, d, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentMetodo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // params ::= params COMA parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> b = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
                                        RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // params ::= parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Object> a = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); 
                                        RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= ID COLOM tipos IGUAL expresion 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                                                    hm.put("tipo", a);
                                                    hm.put("id", b);
                                                    hm.put("expresion", c);
                                                    RESULT = hm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametro ::= ID COLOM tipos 
            {
              HashMap<String,Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                    hm2.put("tipo", a);
                                                    hm2.put("id", b);
                                                    RESULT = hm2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramLlamada ::= paramLlamada COMA ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm = new HashMap<String, Object>();
                                                            hm.put("id", b);
                                                            hm.put("expresion", c);
                                                            RESULT = a; 
                                                            RESULT.add(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramLlamada ::= ID IGUAL expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  var hm2 = new HashMap<String, Object>();
                                                            hm2.put("id", a);
                                                            hm2.put("expresion", b);
                                                            RESULT = new LinkedList<HashMap>();
                                                            RESULT.add(hm2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElse(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentIf ::= IF PAR1 expresion PAR2 LKEY instrucciones RKEY ELSE sentIf 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseIf(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentFor ::= FOR PAR1 asignacion FINCADENA expresion FINCADENA actFor PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones c = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> d = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // actFor ::= asignacion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // actFor ::= insIncremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // actFor ::= insDecremento 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actFor",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentWhile ::= WHILE PAR1 expresion PAR2 LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentWhile ::= DO LKEY instrucciones RKEY WHILE PAR1 expresion PAR2 FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoWhile(b, a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWhile",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentMatch ::= MATCH expresion LKEY listaCasos DEFAULT TO LKEY instrucciones RKEY RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instrucciones> c = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Match(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentMatch",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaCasos ::= caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Caso>(); RESULT.add((Caso)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaCasos ::= listaCasos caso 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; a.add((Caso)b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaCasos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // caso ::= expresion TO LKEY instrucciones RKEY 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instrucciones> b = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Caso(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insIncremento ::= ID INCREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // insIncremento ::= ID INCREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insIncremento",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // insDecremento ::= ID DECREMENTO FINCADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // insDecremento ::= ID DECREMENTO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insDecremento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGATIVO, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion MAS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion MENOS expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion POR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion DIVISION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion POTENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion RAIZ expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RAIZ, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion MODULO expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion IGUALACION expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion DIFERENCIA expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAYOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion MENOR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MENORIGUAL expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion AND expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion OR expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones b = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= NOT expresion 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= CAST PAR1 expresion AS tipos PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casteos(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= ROUND PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= ENTERO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= DECIMAL 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= CARACTER 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= CADENA 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a ,new Tipo(TipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= BOOLEANO 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= PAR1 expresion PAR2 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= Llamada 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instrucciones a = (Instrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= ID 
            {
              Instrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipos ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.ENTERO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.DECIMAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipos ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipos ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.CADENA); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipos ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipos ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(TipoDato.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
