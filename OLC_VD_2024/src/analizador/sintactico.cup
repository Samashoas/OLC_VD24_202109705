package analizador;

// importaciones si fuese necesario
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instrucciones;
import simbolo.*;

//instrucciones
import instrucciones.Print;
//expresiones
import expresiones.Nativo;
// area de codigo -> parser code
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public void syntax_error(Symbol s){}

    public void unrecovered_syntax_error (Symbol s){}

:}

// area de codigo -> accion

action code
{:
:}

terminal String CADENA, ENETERO, DECIMAL;
terminal FINCADENA, PRINT;
terminal PAR1, PAR2;

nonterminal LinkedList<Instrucciones> inicio, instrucciones;
nonterminal Instrucciones instruccion, impresion;
nonterminal Instrucciones expresion;

// Comienzo de la gram√°tica
start with inicio;
inicio ::= instrucciones {: RESULT = a; :}
;

instrucciones ::= instrucciones:a instruccion:b {:RESULT = a; RESULT.add(b); :}
                | instruccion:a {: RESULT = new LinkedList<instruccion>(); RESULT.add(a); :}
;

instruccion ::= impresion:a FINCADENA; {: RESULT = a; :}
;

impresion ::= PRINT PAR1 expresion:a PAR2 {: RESULT = new Print(a, aleft, aright); :}
;

expresion ::= PAR1 expresion:a PAR2 {: RESULT = a; :}
            | ENETERO:a {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENETERO), aleft, aright); :}
            | DECIMAL:a {: RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a  {: RESULT = new Nativo(a,new Tipo(TipoDato.ENETERO), aleft, aright); :}
;

