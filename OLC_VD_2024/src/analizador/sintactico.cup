package analizador;

// importaciones si fuese necesario
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instrucciones;
import simbolo.*;
import excepciones.Errores;

//instrucciones
import instrucciones.Run;
import instrucciones.Llamada;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVUD;
import instrucciones.AsignacionVar;
import instrucciones.AsignacionVUD;
import instrucciones.Metodo;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.IfElseIf;
import instrucciones.IfElse;
import instrucciones.If;
import instrucciones.Caso;
import instrucciones.Match;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Return;
import instrucciones.Break;
import instrucciones.Continue;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.Casteos;
import expresiones.Round;
import expresiones.AccesoVar;
import expresiones.AccesoVUD;
import expresiones.OperadoresAritmeticos;
import expresiones.OperadoresRelacionales;
import expresiones.OperadoresLogicos;

// area de codigo -> parser code
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> erroresSintacticos = new LinkedList<>();

    //Errores recuperables
    public void syntax_error(Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
        }

    //Errores no recuperables
    public void unrecovered_syntax_error (Symbol s){
        erroresSintacticos.add(new Errores("SINTACTICO NO RECUPERABLE: ",
        "no se esperaba el componente " + s.value, s.left, s.right));
    }

:}

// area de codigo -> accion

action code
{:
:}

terminal String CARACTER, CADENA, ENTERO, DECIMAL, BOOLEANO, ID, BREAK, CONTINUE, RETURN;
terminal RUN, COLOM, FINCADENA, IMPRIMIR, CAST, AS, LET, CONST, ROUND;
terminal LKEY, RKEY, PAR1, PAR2, LBRACKET, RBRACKET, COMA, MAS, MENOS, UMENOS, POR, DIVISION, POTENCIA, RAIZ, MODULO, IGUAL;
terminal TO, IGUALACION, DIFERENCIA, MAYOR, MAYORIGUAL, MENOR, MENORIGUAL;
terminal AND, OR, NOT;
terminal INCREMENTO, DECREMENTO;
terminal INT, DOUBLE, CHAR, STRING, BOOL, VOID;
terminal IF, ELSE, FOR, WHILE, DO, MATCH, DEFAULT;

nonterminal LinkedList<Instrucciones> inicio, instrucciones, lista_valoresVUD;
nonterminal LinkedList<HashMap> params, paramLlamada;
nonterminal HashMap<String, Object> parametro;
nonterminal LinkedList<Caso> listaCasos;
nonterminal Instrucciones instruccion, impresion, declaracion, asignacion, sentIf, sentFor, actFor, sentWhile, insIncremento, insDecremento, sentMatch, caso, sentBreak;
nonterminal Instrucciones sentContinue, sentReturn;
nonterminal Instrucciones expresion;
nonterminal Instrucciones SentMetodo, Correr, Llamada;
nonterminal Tipo tipos;


precedence left OR;
precedence left AND;
precedence right NOT;
precedence left IGUALACION, DIFERENCIA, MAYOR, MAYORIGUAL, MENOR, MENORIGUAL;
precedence left MAS, MENOS;
precedence left POR, DIVISION, MODULO;
precedence nonassoc POTENCIA, RAIZ;
precedence right UMENOS;

// Comienzo de la gramática
start with inicio;

inicio ::= instrucciones:a {: RESULT = a; :}
;

instrucciones ::= instrucciones:a instruccion:b {:RESULT = a; RESULT.add(b); :}
                | instruccion:a                 {: RESULT = new LinkedList<Instrucciones>(); RESULT.add(a); :}
;

instruccion ::= impresion:a FINCADENA   {: RESULT = a; :}
               |Correr:a                {: RESULT = a; :}
               |declaracion:a FINCADENA {: RESULT = a; :}
               |asignacion:a FINCADENA  {: RESULT = a; :}
               |insIncremento:a         {: RESULT = a; :}
               |insDecremento:a         {: RESULT = a; :}
               |SentMetodo:a            {: RESULT = a; :}
               |sentIf:a                {: RESULT = a; :}
               |sentFor:a               {: RESULT = a; :}
               |sentWhile:a             {: RESULT = a; :}
               |sentMatch:a             {: RESULT = a; :}
               |sentReturn:a            {: RESULT = a; :}
               |sentBreak:a             {: RESULT = a; :}
               |sentContinue:a          {: RESULT = a; :}
               |Llamada:a FINCADENA     {: RESULT = a; :}
               |error FINCADENA         {:RESULT = null; :}
               |error RKEY              {:RESULT = null; :}
;

impresion ::= IMPRIMIR PAR1 expresion:a PAR2 {: RESULT = new Print(a, aleft, aright); :}
;

Correr ::= RUN ID:a PAR1 paramLlamada:b PAR2 FINCADENA {: RESULT = new Run(a, b, aleft, aright); :}
         | RUN ID:a PAR1 PAR2 FINCADENA                {: RESULT = new Run(a, new LinkedList<HashMap>(), aleft, aright); :}
;

Llamada ::= ID:a PAR1 paramLlamada:b PAR2  {: RESULT = new Llamada(a, b, aleft, aright); :}
          | ID:a PAR1 PAR2                 {: RESULT = new Llamada(a, new LinkedList<HashMap>(), aleft, aright); :}
;

sentReturn ::= RETURN:a FINCADENA {: RESULT = new Return(null, aleft, aright); :}
            | RETURN expresion:a FINCADENA {: RESULT = new Return(a, aleft, aright); :}
;

sentBreak ::= BREAK:a FINCADENA {: RESULT = new Break(aleft, aright); :}
;

sentContinue ::= CONTINUE:a FINCADENA {: RESULT = new Continue(aleft, aright); :}
;

//Declaracion(String Identificador, Instrucciones valor, Tipo type, int line, int column)
//DECLARCIONVUD(ID, LISTA VALORES, MUTABILIDAD, TIPO, LINE, COLUMNA)
declaracion ::= LET ID:a COLOM tipos:b IGUAL expresion:c    {: RESULT = new Declaracion(a, c, b, true, aleft, aright); :}
              | LET ID:a COLOM tipos:b                      {: RESULT = new Declaracion(a, null, b, true, aleft, aright); :}
              | LET ID:a COLOM tipos:b LBRACKET RBRACKET IGUAL LBRACKET lista_valoresVUD:c RBRACKET {: RESULT = new DeclaracionVUD(a, c, true, b, aleft, aright); :}
              | CONST ID:a COLOM tipos:b IGUAL expresion:c  {: RESULT = new Declaracion(a, c, b, false, aleft, aright); :}
              | CONST ID:a COLOM tipos:b                    {: RESULT = new Declaracion(a, null, b, false, aleft, aright); :}
;

//VUD(ID, INDEX, EXPRESION, LINEA, COLUMNA)
asignacion ::= ID:a IGUAL expresion:c  {: RESULT = new AsignacionVar(a, c, aleft, aright); :}
             | ID:a LBRACKET expresion:b RBRACKET IGUAL expresion:c {: RESULT = new AsignacionVUD(a, b, c, aleft, aright); :}
;

lista_valoresVUD ::= lista_valoresVUD:a COMA expresion:b {: RESULT = a; RESULT.add(b); :}
                  | expresion:a                          {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

//Metodo(String id, LinkedList<HashMap> parametros, LinkedList<Instrucciones> instrucciones, Tipo type, int line, int column)
SentMetodo ::= tipos:a ID:b PAR1 PAR2 LKEY instrucciones:c RKEY {: RESULT = new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright); :}
             | tipos:a ID:b PAR1 params:c PAR2 LKEY instrucciones:d RKEY {: RESULT = new Metodo(b, c, d, a, aleft, aright); :}
;

params ::= params:a COMA parametro:b {: RESULT = a; 
                                        RESULT.add(b); :}
         | parametro:a               {: RESULT = new LinkedList<HashMap>(); 
                                        RESULT.add(a); :}
;

parametro ::= ID:b COLOM tipos:a IGUAL expresion:c {: var hm = new HashMap<String, Object>();
                                                    hm.put("tipo", a);
                                                    hm.put("id", b);
                                                    hm.put("expresion", c);
                                                    RESULT = hm; :}
            | ID:b COLOM tipos:a                   {: var hm2 = new HashMap<String, Object>();
                                                    hm2.put("tipo", a);
                                                    hm2.put("id", b);
                                                    RESULT = hm2; :}
;

paramLlamada ::= paramLlamada:a COMA ID:b IGUAL expresion:c   {:  var hm = new HashMap<String, Object>();
                                                            hm.put("id", b);
                                                            hm.put("expresion", c);
                                                            RESULT = a; 
                                                            RESULT.add(hm); :}
               | ID:a IGUAL expresion:b                 {:  var hm2 = new HashMap<String, Object>();
                                                            hm2.put("id", a);
                                                            hm2.put("expresion", b);
                                                            RESULT = new LinkedList<HashMap>();
                                                            RESULT.add(hm2); :} 
;

sentIf ::= IF PAR1 expresion:a PAR2 LKEY instrucciones:b RKEY                                {: RESULT = new If(a, b, aleft, aright); :}
         | IF PAR1 expresion:a PAR2 LKEY instrucciones:b RKEY ELSE LKEY instrucciones:c RKEY {: RESULT = new IfElse(a, b, c, aleft, aright); :}
         | IF PAR1 expresion:a PAR2 LKEY instrucciones:b RKEY ELSE sentIf:c                  {: RESULT = new IfElseIf(a, b, c, aleft, aright); :}
;
                                                                                                        //For(Instrucciones asignacion, Instrucciones condicion, Instrucciones actualización, LinkedList<Instrucciones> instrucciones, Tipo type, int line, int column)
sentFor ::= FOR PAR1 asignacion:a FINCADENA expresion:b FINCADENA actFor:c PAR2 LKEY instrucciones:d RKEY {: RESULT = new For(a, b, c, d, aleft, aright); :}
;

actFor ::= asignacion:a   {: RESULT = a; :}
        | insIncremento:a {: RESULT = a; :}
        | insDecremento:a {: RESULT = a; :}
;

sentWhile ::= WHILE PAR1 expresion:a PAR2 LKEY instrucciones:b RKEY              {: RESULT = new While(a, b, aleft, aright); :}
            | DO LKEY instrucciones:a RKEY WHILE PAR1 expresion:b PAR2 FINCADENA {: RESULT = new DoWhile(b, a, aleft, aright); :}
;

sentMatch ::= MATCH expresion:a LKEY listaCasos:b DEFAULT TO LKEY instrucciones:c RKEY RKEY {: RESULT = new Match(a, b, c, aleft, aright); :}
;

listaCasos ::= caso:a               {: RESULT = new LinkedList<Caso>(); RESULT.add((Caso)a); :}
             | listaCasos:a caso:b  {: RESULT = a; a.add((Caso)b); :}
;

caso ::= expresion:a TO LKEY instrucciones:b RKEY {: RESULT = new Caso(a, b, aleft, aright); :}
;

insIncremento ::=ID:a INCREMENTO FINCADENA {: RESULT = new Incremento(a, aleft, aright); :}
                |ID:a INCREMENTO           {: RESULT = new Incremento(a, aleft, aright); :}
;

insDecremento ::=ID:a DECREMENTO FINCADENA {: RESULT = new Decremento(a, aleft, aright); :}
                |ID:a DECREMENTO           {: RESULT = new Decremento(a, aleft, aright); :}
;

expresion ::= MENOS expresion:a               {:   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGATIVO, aleft, aright);:} %prec UMENOS 
            |expresion:a MAS expresion:b      {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            |expresion:a MENOS expresion:b    {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright);   :}
            |expresion:a POR expresion:b      {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright);   :}
            |expresion:a DIVISION expresion:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright);   :}
            |expresion:a POTENCIA expresion:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright);   :}
            |expresion:a RAIZ expresion:b     {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RAIZ, aleft, aright);   :}
            |expresion:a MODULO expresion:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright);   :}

            |expresion:a IGUALACION expresion:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUALACION, aleft, aright);   :}
            |expresion:a DIFERENCIA expresion:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENCIA, aleft, aright);   :}
            |expresion:a MAYOR expresion:b      {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright);   :}
            |expresion:a MAYORIGUAL expresion:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);   :}
            |expresion:a MENOR expresion:b      {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright);   :}
            |expresion:a MENORIGUAL expresion:b {:   RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);   :}

            |expresion:a AND expresion:b {:   RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright);   :}
            |expresion:a OR expresion:b  {:   RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright);   :}
            |NOT expresion:a             {:   RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);   :} %prec NOT

            |CAST PAR1 expresion:a AS tipos:b PAR2 {:   RESULT = new Casteos(a, b, aleft, aright);   :}

            |ROUND PAR1 expresion:a PAR2 {:   RESULT = new Round(a, aleft, aright);   :}

            | ENTERO:a   {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a  {: RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); :}
            | CARACTER:a {: RESULT = new Nativo(a, new Tipo(TipoDato.CARACTER), aleft, aright); :}
            | CADENA:a   {: RESULT = new Nativo(a ,new Tipo(TipoDato.CADENA), aleft, aright); :}
            | BOOLEANO:a {: RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(TipoDato.BOOLEANO), aleft, aright); :}
            
            | PAR1 expresion:a PAR2 {: RESULT = a; :}

            | ID:a {: RESULT = new AccesoVar(a, aleft, aright); :}

            | ID:a LBRACKET expresion:b RBRACKET {: RESULT = new AccesoVUD(a, b, aleft, aright); :}

            | Llamada:a {: RESULT = a; :}
;

tipos ::= INT      {: RESULT = new Tipo(TipoDato.ENTERO); :}
        | DOUBLE   {: RESULT = new Tipo(TipoDato.DECIMAL); :}
        | CHAR     {: RESULT = new Tipo(TipoDato.CARACTER); :}
        | STRING   {: RESULT = new Tipo(TipoDato.CADENA); :}
        | BOOL     {: RESULT = new Tipo(TipoDato.BOOLEANO); :}
        | VOID     {: RESULT = new Tipo(TipoDato.VOID); :}
;