package analizador;

// importaciones si fuese necesario
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instrucciones;
import simbolo.*;

//instrucciones
import instrucciones.Print;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;

// area de codigo -> parser code
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public void syntax_error(Symbol s){}

    public void unrecovered_syntax_error (Symbol s){}

:}

// area de codigo -> accion

action code
{:
:}

terminal String CADENA, ENTERO, DECIMAL;
terminal FINCADENA, IMPRIMIR;
terminal PAR1, PAR2, MAS;

nonterminal LinkedList<Instrucciones> inicio, instrucciones;
nonterminal Instrucciones instruccion, impresion;
nonterminal Instrucciones expresion;

precedence left MAS;

// Comienzo de la gram√°tica
start with inicio;

inicio ::= instrucciones:a {: RESULT = a; :}
;

instrucciones ::= instrucciones:a instruccion:b {:RESULT = a; RESULT.add(b); :}
                | instruccion:a {: RESULT = new LinkedList<Instrucciones>(); RESULT.add(a); :}
;

instruccion ::= impresion:a {: RESULT = a; :}
;

impresion ::= IMPRIMIR PAR1 expresion:a PAR2 FINCADENA{: RESULT = new Print(a, aleft, aright); :}
;

expresion ::= expresion:a MAS expresion:b {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | ENTERO:a {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a {: RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a  {: RESULT = new Nativo(a ,new Tipo(TipoDato.CADENA), aleft, aright); :}
            | PAR1 expresion:a PAR2 {: RESULT = a; :}
;